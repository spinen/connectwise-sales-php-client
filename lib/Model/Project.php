<?php
/**
 * Project
 *
 * PHP version 5
 *
 * @category Class
 * @package  Spinen\ConnectWise\Clients\Sales
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sales API
 *
 * ConnectWise Sales API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: platform@connectwise.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Clients\Sales\Model;

use \ArrayAccess;

/**
 * Project Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Spinen\ConnectWise\Clients\Sales
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Project implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Project';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        '_info' => '\Spinen\ConnectWise\Clients\Sales\Model\Metadata',
        'actual_end' => 'string',
        'actual_hours' => 'double',
        'actual_start' => 'string',
        'agreement' => '\Spinen\ConnectWise\Clients\Sales\Model\AgreementReference',
        'bill_expenses' => 'string',
        'billing_amount' => 'double',
        'billing_attention' => 'string',
        'billing_method' => 'string',
        'billing_rate_type' => 'string',
        'billing_terms' => '\Spinen\ConnectWise\Clients\Sales\Model\BillingTermsReference',
        'bill_products' => 'string',
        'bill_project_after_closed_flag' => 'bool',
        'bill_time' => 'string',
        'bill_to_company' => '\Spinen\ConnectWise\Clients\Sales\Model\CompanyReference',
        'bill_to_contact' => '\Spinen\ConnectWise\Clients\Sales\Model\ContactReference',
        'bill_to_site' => '\Spinen\ConnectWise\Clients\Sales\Model\SiteReference',
        'bill_unapproved_time_and_expense' => 'bool',
        'board' => '\Spinen\ConnectWise\Clients\Sales\Model\ProjectBoardReference',
        'budget_analysis' => 'string',
        'budget_flag' => 'bool',
        'budget_hours' => 'double',
        'business_unit_id' => 'int',
        'company' => '\Spinen\ConnectWise\Clients\Sales\Model\CompanyReference',
        'contact' => '\Spinen\ConnectWise\Clients\Sales\Model\ContactReference',
        'customer_po' => 'string',
        'description' => 'string',
        'downpayment' => 'double',
        'estimated_end' => '\DateTime',
        'estimated_expense_revenue' => 'double',
        'estimated_hours' => 'double',
        'estimated_product_revenue' => 'double',
        'estimated_start' => '\DateTime',
        'estimated_time_revenue' => 'double',
        'expense_approver' => '\Spinen\ConnectWise\Clients\Sales\Model\MemberReference',
        'include_dependencies_flag' => 'bool',
        'include_estimates_flag' => 'bool',
        'location_id' => 'int',
        'manager' => '\Spinen\ConnectWise\Clients\Sales\Model\MemberReference',
        'name' => 'string',
        'opportunity' => '\Spinen\ConnectWise\Clients\Sales\Model\OpportunityReference',
        'project_template_id' => 'int',
        'restrict_down_payment_flag' => 'bool',
        'scheduled_end' => 'string',
        'scheduled_hours' => 'double',
        'scheduled_start' => 'string',
        'ship_to_company' => '\Spinen\ConnectWise\Clients\Sales\Model\CompanyReference',
        'ship_to_contact' => '\Spinen\ConnectWise\Clients\Sales\Model\ContactReference',
        'ship_to_site' => '\Spinen\ConnectWise\Clients\Sales\Model\SiteReference',
        'site' => '\Spinen\ConnectWise\Clients\Sales\Model\SiteReference',
        'status' => '\Spinen\ConnectWise\Clients\Sales\Model\ProjectStatusReference',
        'time_approver' => '\Spinen\ConnectWise\Clients\Sales\Model\MemberReference',
        'type' => '\Spinen\ConnectWise\Clients\Sales\Model\ProjectTypeReference'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        '_info' => '_info',
        'actual_end' => 'actualEnd',
        'actual_hours' => 'actualHours',
        'actual_start' => 'actualStart',
        'agreement' => 'agreement',
        'bill_expenses' => 'billExpenses',
        'billing_amount' => 'billingAmount',
        'billing_attention' => 'billingAttention',
        'billing_method' => 'billingMethod',
        'billing_rate_type' => 'billingRateType',
        'billing_terms' => 'billingTerms',
        'bill_products' => 'billProducts',
        'bill_project_after_closed_flag' => 'billProjectAfterClosedFlag',
        'bill_time' => 'billTime',
        'bill_to_company' => 'billToCompany',
        'bill_to_contact' => 'billToContact',
        'bill_to_site' => 'billToSite',
        'bill_unapproved_time_and_expense' => 'billUnapprovedTimeAndExpense',
        'board' => 'board',
        'budget_analysis' => 'budgetAnalysis',
        'budget_flag' => 'budgetFlag',
        'budget_hours' => 'budgetHours',
        'business_unit_id' => 'businessUnitId',
        'company' => 'company',
        'contact' => 'contact',
        'customer_po' => 'customerPO',
        'description' => 'description',
        'downpayment' => 'downpayment',
        'estimated_end' => 'estimatedEnd',
        'estimated_expense_revenue' => 'estimatedExpenseRevenue',
        'estimated_hours' => 'estimatedHours',
        'estimated_product_revenue' => 'estimatedProductRevenue',
        'estimated_start' => 'estimatedStart',
        'estimated_time_revenue' => 'estimatedTimeRevenue',
        'expense_approver' => 'expenseApprover',
        'include_dependencies_flag' => 'includeDependenciesFlag',
        'include_estimates_flag' => 'includeEstimatesFlag',
        'location_id' => 'locationId',
        'manager' => 'manager',
        'name' => 'name',
        'opportunity' => 'opportunity',
        'project_template_id' => 'projectTemplateId',
        'restrict_down_payment_flag' => 'restrictDownPaymentFlag',
        'scheduled_end' => 'scheduledEnd',
        'scheduled_hours' => 'scheduledHours',
        'scheduled_start' => 'scheduledStart',
        'ship_to_company' => 'shipToCompany',
        'ship_to_contact' => 'shipToContact',
        'ship_to_site' => 'shipToSite',
        'site' => 'site',
        'status' => 'status',
        'time_approver' => 'timeApprover',
        'type' => 'type'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        '_info' => 'setInfo',
        'actual_end' => 'setActualEnd',
        'actual_hours' => 'setActualHours',
        'actual_start' => 'setActualStart',
        'agreement' => 'setAgreement',
        'bill_expenses' => 'setBillExpenses',
        'billing_amount' => 'setBillingAmount',
        'billing_attention' => 'setBillingAttention',
        'billing_method' => 'setBillingMethod',
        'billing_rate_type' => 'setBillingRateType',
        'billing_terms' => 'setBillingTerms',
        'bill_products' => 'setBillProducts',
        'bill_project_after_closed_flag' => 'setBillProjectAfterClosedFlag',
        'bill_time' => 'setBillTime',
        'bill_to_company' => 'setBillToCompany',
        'bill_to_contact' => 'setBillToContact',
        'bill_to_site' => 'setBillToSite',
        'bill_unapproved_time_and_expense' => 'setBillUnapprovedTimeAndExpense',
        'board' => 'setBoard',
        'budget_analysis' => 'setBudgetAnalysis',
        'budget_flag' => 'setBudgetFlag',
        'budget_hours' => 'setBudgetHours',
        'business_unit_id' => 'setBusinessUnitId',
        'company' => 'setCompany',
        'contact' => 'setContact',
        'customer_po' => 'setCustomerPo',
        'description' => 'setDescription',
        'downpayment' => 'setDownpayment',
        'estimated_end' => 'setEstimatedEnd',
        'estimated_expense_revenue' => 'setEstimatedExpenseRevenue',
        'estimated_hours' => 'setEstimatedHours',
        'estimated_product_revenue' => 'setEstimatedProductRevenue',
        'estimated_start' => 'setEstimatedStart',
        'estimated_time_revenue' => 'setEstimatedTimeRevenue',
        'expense_approver' => 'setExpenseApprover',
        'include_dependencies_flag' => 'setIncludeDependenciesFlag',
        'include_estimates_flag' => 'setIncludeEstimatesFlag',
        'location_id' => 'setLocationId',
        'manager' => 'setManager',
        'name' => 'setName',
        'opportunity' => 'setOpportunity',
        'project_template_id' => 'setProjectTemplateId',
        'restrict_down_payment_flag' => 'setRestrictDownPaymentFlag',
        'scheduled_end' => 'setScheduledEnd',
        'scheduled_hours' => 'setScheduledHours',
        'scheduled_start' => 'setScheduledStart',
        'ship_to_company' => 'setShipToCompany',
        'ship_to_contact' => 'setShipToContact',
        'ship_to_site' => 'setShipToSite',
        'site' => 'setSite',
        'status' => 'setStatus',
        'time_approver' => 'setTimeApprover',
        'type' => 'setType'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        '_info' => 'getInfo',
        'actual_end' => 'getActualEnd',
        'actual_hours' => 'getActualHours',
        'actual_start' => 'getActualStart',
        'agreement' => 'getAgreement',
        'bill_expenses' => 'getBillExpenses',
        'billing_amount' => 'getBillingAmount',
        'billing_attention' => 'getBillingAttention',
        'billing_method' => 'getBillingMethod',
        'billing_rate_type' => 'getBillingRateType',
        'billing_terms' => 'getBillingTerms',
        'bill_products' => 'getBillProducts',
        'bill_project_after_closed_flag' => 'getBillProjectAfterClosedFlag',
        'bill_time' => 'getBillTime',
        'bill_to_company' => 'getBillToCompany',
        'bill_to_contact' => 'getBillToContact',
        'bill_to_site' => 'getBillToSite',
        'bill_unapproved_time_and_expense' => 'getBillUnapprovedTimeAndExpense',
        'board' => 'getBoard',
        'budget_analysis' => 'getBudgetAnalysis',
        'budget_flag' => 'getBudgetFlag',
        'budget_hours' => 'getBudgetHours',
        'business_unit_id' => 'getBusinessUnitId',
        'company' => 'getCompany',
        'contact' => 'getContact',
        'customer_po' => 'getCustomerPo',
        'description' => 'getDescription',
        'downpayment' => 'getDownpayment',
        'estimated_end' => 'getEstimatedEnd',
        'estimated_expense_revenue' => 'getEstimatedExpenseRevenue',
        'estimated_hours' => 'getEstimatedHours',
        'estimated_product_revenue' => 'getEstimatedProductRevenue',
        'estimated_start' => 'getEstimatedStart',
        'estimated_time_revenue' => 'getEstimatedTimeRevenue',
        'expense_approver' => 'getExpenseApprover',
        'include_dependencies_flag' => 'getIncludeDependenciesFlag',
        'include_estimates_flag' => 'getIncludeEstimatesFlag',
        'location_id' => 'getLocationId',
        'manager' => 'getManager',
        'name' => 'getName',
        'opportunity' => 'getOpportunity',
        'project_template_id' => 'getProjectTemplateId',
        'restrict_down_payment_flag' => 'getRestrictDownPaymentFlag',
        'scheduled_end' => 'getScheduledEnd',
        'scheduled_hours' => 'getScheduledHours',
        'scheduled_start' => 'getScheduledStart',
        'ship_to_company' => 'getShipToCompany',
        'ship_to_contact' => 'getShipToContact',
        'ship_to_site' => 'getShipToSite',
        'site' => 'getSite',
        'status' => 'getStatus',
        'time_approver' => 'getTimeApprover',
        'type' => 'getType'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const BILL_EXPENSES_BILLABLE = 'Billable';
    const BILL_EXPENSES_DO_NOT_BILL = 'DoNotBill';
    const BILL_EXPENSES_NO_CHARGE = 'NoCharge';
    const BILL_EXPENSES_NO_DEFAULT = 'NoDefault';
    const BILLING_METHOD_ACTUAL_RATES = 'ActualRates';
    const BILLING_METHOD_FIXED_FEE = 'FixedFee';
    const BILLING_METHOD_NOT_TO_EXCEED = 'NotToExceed';
    const BILLING_METHOD_OVERRIDE_RATE = 'OverrideRate';
    const BILLING_RATE_TYPE_WORK_ROLE = 'WorkRole';
    const BILLING_RATE_TYPE_STAFF_MEMBER = 'StaffMember';
    const BILL_PRODUCTS_BILLABLE = 'Billable';
    const BILL_PRODUCTS_DO_NOT_BILL = 'DoNotBill';
    const BILL_PRODUCTS_NO_CHARGE = 'NoCharge';
    const BILL_PRODUCTS_NO_DEFAULT = 'NoDefault';
    const BILL_TIME_BILLABLE = 'Billable';
    const BILL_TIME_DO_NOT_BILL = 'DoNotBill';
    const BILL_TIME_NO_CHARGE = 'NoCharge';
    const BILL_TIME_NO_DEFAULT = 'NoDefault';
    const BUDGET_ANALYSIS_ACTUAL_HOURS = 'ActualHours';
    const BUDGET_ANALYSIS_BILLABLE_HOURS = 'BillableHours';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getBillExpensesAllowableValues()
    {
        return [
            self::BILL_EXPENSES_BILLABLE,
            self::BILL_EXPENSES_DO_NOT_BILL,
            self::BILL_EXPENSES_NO_CHARGE,
            self::BILL_EXPENSES_NO_DEFAULT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getBillingMethodAllowableValues()
    {
        return [
            self::BILLING_METHOD_ACTUAL_RATES,
            self::BILLING_METHOD_FIXED_FEE,
            self::BILLING_METHOD_NOT_TO_EXCEED,
            self::BILLING_METHOD_OVERRIDE_RATE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getBillingRateTypeAllowableValues()
    {
        return [
            self::BILLING_RATE_TYPE_WORK_ROLE,
            self::BILLING_RATE_TYPE_STAFF_MEMBER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getBillProductsAllowableValues()
    {
        return [
            self::BILL_PRODUCTS_BILLABLE,
            self::BILL_PRODUCTS_DO_NOT_BILL,
            self::BILL_PRODUCTS_NO_CHARGE,
            self::BILL_PRODUCTS_NO_DEFAULT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getBillTimeAllowableValues()
    {
        return [
            self::BILL_TIME_BILLABLE,
            self::BILL_TIME_DO_NOT_BILL,
            self::BILL_TIME_NO_CHARGE,
            self::BILL_TIME_NO_DEFAULT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getBudgetAnalysisAllowableValues()
    {
        return [
            self::BUDGET_ANALYSIS_ACTUAL_HOURS,
            self::BUDGET_ANALYSIS_BILLABLE_HOURS,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['_info'] = isset($data['_info']) ? $data['_info'] : null;
        $this->container['actual_end'] = isset($data['actual_end']) ? $data['actual_end'] : null;
        $this->container['actual_hours'] = isset($data['actual_hours']) ? $data['actual_hours'] : null;
        $this->container['actual_start'] = isset($data['actual_start']) ? $data['actual_start'] : null;
        $this->container['agreement'] = isset($data['agreement']) ? $data['agreement'] : null;
        $this->container['bill_expenses'] = isset($data['bill_expenses']) ? $data['bill_expenses'] : null;
        $this->container['billing_amount'] = isset($data['billing_amount']) ? $data['billing_amount'] : null;
        $this->container['billing_attention'] = isset($data['billing_attention']) ? $data['billing_attention'] : null;
        $this->container['billing_method'] = isset($data['billing_method']) ? $data['billing_method'] : null;
        $this->container['billing_rate_type'] = isset($data['billing_rate_type']) ? $data['billing_rate_type'] : null;
        $this->container['billing_terms'] = isset($data['billing_terms']) ? $data['billing_terms'] : null;
        $this->container['bill_products'] = isset($data['bill_products']) ? $data['bill_products'] : null;
        $this->container['bill_project_after_closed_flag'] = isset($data['bill_project_after_closed_flag']) ? $data['bill_project_after_closed_flag'] : null;
        $this->container['bill_time'] = isset($data['bill_time']) ? $data['bill_time'] : null;
        $this->container['bill_to_company'] = isset($data['bill_to_company']) ? $data['bill_to_company'] : null;
        $this->container['bill_to_contact'] = isset($data['bill_to_contact']) ? $data['bill_to_contact'] : null;
        $this->container['bill_to_site'] = isset($data['bill_to_site']) ? $data['bill_to_site'] : null;
        $this->container['bill_unapproved_time_and_expense'] = isset($data['bill_unapproved_time_and_expense']) ? $data['bill_unapproved_time_and_expense'] : null;
        $this->container['board'] = isset($data['board']) ? $data['board'] : null;
        $this->container['budget_analysis'] = isset($data['budget_analysis']) ? $data['budget_analysis'] : null;
        $this->container['budget_flag'] = isset($data['budget_flag']) ? $data['budget_flag'] : null;
        $this->container['budget_hours'] = isset($data['budget_hours']) ? $data['budget_hours'] : null;
        $this->container['business_unit_id'] = isset($data['business_unit_id']) ? $data['business_unit_id'] : null;
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
        $this->container['contact'] = isset($data['contact']) ? $data['contact'] : null;
        $this->container['customer_po'] = isset($data['customer_po']) ? $data['customer_po'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['downpayment'] = isset($data['downpayment']) ? $data['downpayment'] : null;
        $this->container['estimated_end'] = isset($data['estimated_end']) ? $data['estimated_end'] : null;
        $this->container['estimated_expense_revenue'] = isset($data['estimated_expense_revenue']) ? $data['estimated_expense_revenue'] : null;
        $this->container['estimated_hours'] = isset($data['estimated_hours']) ? $data['estimated_hours'] : null;
        $this->container['estimated_product_revenue'] = isset($data['estimated_product_revenue']) ? $data['estimated_product_revenue'] : null;
        $this->container['estimated_start'] = isset($data['estimated_start']) ? $data['estimated_start'] : null;
        $this->container['estimated_time_revenue'] = isset($data['estimated_time_revenue']) ? $data['estimated_time_revenue'] : null;
        $this->container['expense_approver'] = isset($data['expense_approver']) ? $data['expense_approver'] : null;
        $this->container['include_dependencies_flag'] = isset($data['include_dependencies_flag']) ? $data['include_dependencies_flag'] : null;
        $this->container['include_estimates_flag'] = isset($data['include_estimates_flag']) ? $data['include_estimates_flag'] : null;
        $this->container['location_id'] = isset($data['location_id']) ? $data['location_id'] : null;
        $this->container['manager'] = isset($data['manager']) ? $data['manager'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['opportunity'] = isset($data['opportunity']) ? $data['opportunity'] : null;
        $this->container['project_template_id'] = isset($data['project_template_id']) ? $data['project_template_id'] : null;
        $this->container['restrict_down_payment_flag'] = isset($data['restrict_down_payment_flag']) ? $data['restrict_down_payment_flag'] : null;
        $this->container['scheduled_end'] = isset($data['scheduled_end']) ? $data['scheduled_end'] : null;
        $this->container['scheduled_hours'] = isset($data['scheduled_hours']) ? $data['scheduled_hours'] : null;
        $this->container['scheduled_start'] = isset($data['scheduled_start']) ? $data['scheduled_start'] : null;
        $this->container['ship_to_company'] = isset($data['ship_to_company']) ? $data['ship_to_company'] : null;
        $this->container['ship_to_contact'] = isset($data['ship_to_contact']) ? $data['ship_to_contact'] : null;
        $this->container['ship_to_site'] = isset($data['ship_to_site']) ? $data['ship_to_site'] : null;
        $this->container['site'] = isset($data['site']) ? $data['site'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['time_approver'] = isset($data['time_approver']) ? $data['time_approver'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        $allowed_values = ["Billable", "DoNotBill", "NoCharge", "NoDefault"];
        if (!in_array($this->container['bill_expenses'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'bill_expenses', must be one of #{allowed_values}.";
        }

        if (!is_null($this->container['billing_attention']) && (strlen($this->container['billing_attention']) > 50)) {
            $invalid_properties[] = "invalid value for 'billing_attention', the character length must be smaller than or equal to 50.";
        }

        if ($this->container['billing_method'] === null) {
            $invalid_properties[] = "'billing_method' can't be null";
        }
        $allowed_values = ["ActualRates", "FixedFee", "NotToExceed", "OverrideRate"];
        if (!in_array($this->container['billing_method'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'billing_method', must be one of #{allowed_values}.";
        }

        $allowed_values = ["WorkRole", "StaffMember"];
        if (!in_array($this->container['billing_rate_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'billing_rate_type', must be one of #{allowed_values}.";
        }

        $allowed_values = ["Billable", "DoNotBill", "NoCharge", "NoDefault"];
        if (!in_array($this->container['bill_products'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'bill_products', must be one of #{allowed_values}.";
        }

        $allowed_values = ["Billable", "DoNotBill", "NoCharge", "NoDefault"];
        if (!in_array($this->container['bill_time'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'bill_time', must be one of #{allowed_values}.";
        }

        if ($this->container['board'] === null) {
            $invalid_properties[] = "'board' can't be null";
        }
        $allowed_values = ["ActualHours", "BillableHours"];
        if (!in_array($this->container['budget_analysis'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'budget_analysis', must be one of #{allowed_values}.";
        }

        if ($this->container['company'] === null) {
            $invalid_properties[] = "'company' can't be null";
        }
        if (!is_null($this->container['customer_po']) && (strlen($this->container['customer_po']) > 50)) {
            $invalid_properties[] = "invalid value for 'customer_po', the character length must be smaller than or equal to 50.";
        }

        if ($this->container['estimated_end'] === null) {
            $invalid_properties[] = "'estimated_end' can't be null";
        }
        if ($this->container['estimated_start'] === null) {
            $invalid_properties[] = "'estimated_start' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ((strlen($this->container['name']) > 100)) {
            $invalid_properties[] = "invalid value for 'name', the character length must be smaller than or equal to 100.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = ["Billable", "DoNotBill", "NoCharge", "NoDefault"];
        if (!in_array($this->container['bill_expenses'], $allowed_values)) {
            return false;
        }
        if (strlen($this->container['billing_attention']) > 50) {
            return false;
        }
        if ($this->container['billing_method'] === null) {
            return false;
        }
        $allowed_values = ["ActualRates", "FixedFee", "NotToExceed", "OverrideRate"];
        if (!in_array($this->container['billing_method'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["WorkRole", "StaffMember"];
        if (!in_array($this->container['billing_rate_type'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["Billable", "DoNotBill", "NoCharge", "NoDefault"];
        if (!in_array($this->container['bill_products'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["Billable", "DoNotBill", "NoCharge", "NoDefault"];
        if (!in_array($this->container['bill_time'], $allowed_values)) {
            return false;
        }
        if ($this->container['board'] === null) {
            return false;
        }
        $allowed_values = ["ActualHours", "BillableHours"];
        if (!in_array($this->container['budget_analysis'], $allowed_values)) {
            return false;
        }
        if ($this->container['company'] === null) {
            return false;
        }
        if (strlen($this->container['customer_po']) > 50) {
            return false;
        }
        if ($this->container['estimated_end'] === null) {
            return false;
        }
        if ($this->container['estimated_start'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if (strlen($this->container['name']) > 100) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets _info
     * @return \Spinen\ConnectWise\Clients\Sales\Model\Metadata
     */
    public function getInfo()
    {
        return $this->container['_info'];
    }

    /**
     * Sets _info
     * @param \Spinen\ConnectWise\Clients\Sales\Model\Metadata $_info Metadata of the entity
     * @return $this
     */
    public function setInfo($_info)
    {
        $this->container['_info'] = $_info;

        return $this;
    }

    /**
     * Gets actual_end
     * @return string
     */
    public function getActualEnd()
    {
        return $this->container['actual_end'];
    }

    /**
     * Sets actual_end
     * @param string $actual_end
     * @return $this
     */
    public function setActualEnd($actual_end)
    {
        $this->container['actual_end'] = $actual_end;

        return $this;
    }

    /**
     * Gets actual_hours
     * @return double
     */
    public function getActualHours()
    {
        return $this->container['actual_hours'];
    }

    /**
     * Sets actual_hours
     * @param double $actual_hours
     * @return $this
     */
    public function setActualHours($actual_hours)
    {
        $this->container['actual_hours'] = $actual_hours;

        return $this;
    }

    /**
     * Gets actual_start
     * @return string
     */
    public function getActualStart()
    {
        return $this->container['actual_start'];
    }

    /**
     * Sets actual_start
     * @param string $actual_start
     * @return $this
     */
    public function setActualStart($actual_start)
    {
        $this->container['actual_start'] = $actual_start;

        return $this;
    }

    /**
     * Gets agreement
     * @return \Spinen\ConnectWise\Clients\Sales\Model\AgreementReference
     */
    public function getAgreement()
    {
        return $this->container['agreement'];
    }

    /**
     * Sets agreement
     * @param \Spinen\ConnectWise\Clients\Sales\Model\AgreementReference $agreement
     * @return $this
     */
    public function setAgreement($agreement)
    {
        $this->container['agreement'] = $agreement;

        return $this;
    }

    /**
     * Gets bill_expenses
     * @return string
     */
    public function getBillExpenses()
    {
        return $this->container['bill_expenses'];
    }

    /**
     * Sets bill_expenses
     * @param string $bill_expenses
     * @return $this
     */
    public function setBillExpenses($bill_expenses)
    {
        $allowed_values = array('Billable', 'DoNotBill', 'NoCharge', 'NoDefault');
        if (!is_null($bill_expenses) && (!in_array($bill_expenses, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'bill_expenses', must be one of 'Billable', 'DoNotBill', 'NoCharge', 'NoDefault'");
        }
        $this->container['bill_expenses'] = $bill_expenses;

        return $this;
    }

    /**
     * Gets billing_amount
     * @return double
     */
    public function getBillingAmount()
    {
        return $this->container['billing_amount'];
    }

    /**
     * Sets billing_amount
     * @param double $billing_amount
     * @return $this
     */
    public function setBillingAmount($billing_amount)
    {
        $this->container['billing_amount'] = $billing_amount;

        return $this;
    }

    /**
     * Gets billing_attention
     * @return string
     */
    public function getBillingAttention()
    {
        return $this->container['billing_attention'];
    }

    /**
     * Sets billing_attention
     * @param string $billing_attention
     * @return $this
     */
    public function setBillingAttention($billing_attention)
    {
        if (!is_null($billing_attention) && (strlen($billing_attention) > 50)) {
            throw new \InvalidArgumentException('invalid length for $billing_attention when calling Project., must be smaller than or equal to 50.');
        }

        $this->container['billing_attention'] = $billing_attention;

        return $this;
    }

    /**
     * Gets billing_method
     * @return string
     */
    public function getBillingMethod()
    {
        return $this->container['billing_method'];
    }

    /**
     * Sets billing_method
     * @param string $billing_method
     * @return $this
     */
    public function setBillingMethod($billing_method)
    {
        $allowed_values = array('ActualRates', 'FixedFee', 'NotToExceed', 'OverrideRate');
        if ((!in_array($billing_method, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'billing_method', must be one of 'ActualRates', 'FixedFee', 'NotToExceed', 'OverrideRate'");
        }
        $this->container['billing_method'] = $billing_method;

        return $this;
    }

    /**
     * Gets billing_rate_type
     * @return string
     */
    public function getBillingRateType()
    {
        return $this->container['billing_rate_type'];
    }

    /**
     * Sets billing_rate_type
     * @param string $billing_rate_type
     * @return $this
     */
    public function setBillingRateType($billing_rate_type)
    {
        $allowed_values = array('WorkRole', 'StaffMember');
        if (!is_null($billing_rate_type) && (!in_array($billing_rate_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'billing_rate_type', must be one of 'WorkRole', 'StaffMember'");
        }
        $this->container['billing_rate_type'] = $billing_rate_type;

        return $this;
    }

    /**
     * Gets billing_terms
     * @return \Spinen\ConnectWise\Clients\Sales\Model\BillingTermsReference
     */
    public function getBillingTerms()
    {
        return $this->container['billing_terms'];
    }

    /**
     * Sets billing_terms
     * @param \Spinen\ConnectWise\Clients\Sales\Model\BillingTermsReference $billing_terms
     * @return $this
     */
    public function setBillingTerms($billing_terms)
    {
        $this->container['billing_terms'] = $billing_terms;

        return $this;
    }

    /**
     * Gets bill_products
     * @return string
     */
    public function getBillProducts()
    {
        return $this->container['bill_products'];
    }

    /**
     * Sets bill_products
     * @param string $bill_products
     * @return $this
     */
    public function setBillProducts($bill_products)
    {
        $allowed_values = array('Billable', 'DoNotBill', 'NoCharge', 'NoDefault');
        if (!is_null($bill_products) && (!in_array($bill_products, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'bill_products', must be one of 'Billable', 'DoNotBill', 'NoCharge', 'NoDefault'");
        }
        $this->container['bill_products'] = $bill_products;

        return $this;
    }

    /**
     * Gets bill_project_after_closed_flag
     * @return bool
     */
    public function getBillProjectAfterClosedFlag()
    {
        return $this->container['bill_project_after_closed_flag'];
    }

    /**
     * Sets bill_project_after_closed_flag
     * @param bool $bill_project_after_closed_flag
     * @return $this
     */
    public function setBillProjectAfterClosedFlag($bill_project_after_closed_flag)
    {
        $this->container['bill_project_after_closed_flag'] = $bill_project_after_closed_flag;

        return $this;
    }

    /**
     * Gets bill_time
     * @return string
     */
    public function getBillTime()
    {
        return $this->container['bill_time'];
    }

    /**
     * Sets bill_time
     * @param string $bill_time
     * @return $this
     */
    public function setBillTime($bill_time)
    {
        $allowed_values = array('Billable', 'DoNotBill', 'NoCharge', 'NoDefault');
        if (!is_null($bill_time) && (!in_array($bill_time, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'bill_time', must be one of 'Billable', 'DoNotBill', 'NoCharge', 'NoDefault'");
        }
        $this->container['bill_time'] = $bill_time;

        return $this;
    }

    /**
     * Gets bill_to_company
     * @return \Spinen\ConnectWise\Clients\Sales\Model\CompanyReference
     */
    public function getBillToCompany()
    {
        return $this->container['bill_to_company'];
    }

    /**
     * Sets bill_to_company
     * @param \Spinen\ConnectWise\Clients\Sales\Model\CompanyReference $bill_to_company
     * @return $this
     */
    public function setBillToCompany($bill_to_company)
    {
        $this->container['bill_to_company'] = $bill_to_company;

        return $this;
    }

    /**
     * Gets bill_to_contact
     * @return \Spinen\ConnectWise\Clients\Sales\Model\ContactReference
     */
    public function getBillToContact()
    {
        return $this->container['bill_to_contact'];
    }

    /**
     * Sets bill_to_contact
     * @param \Spinen\ConnectWise\Clients\Sales\Model\ContactReference $bill_to_contact
     * @return $this
     */
    public function setBillToContact($bill_to_contact)
    {
        $this->container['bill_to_contact'] = $bill_to_contact;

        return $this;
    }

    /**
     * Gets bill_to_site
     * @return \Spinen\ConnectWise\Clients\Sales\Model\SiteReference
     */
    public function getBillToSite()
    {
        return $this->container['bill_to_site'];
    }

    /**
     * Sets bill_to_site
     * @param \Spinen\ConnectWise\Clients\Sales\Model\SiteReference $bill_to_site
     * @return $this
     */
    public function setBillToSite($bill_to_site)
    {
        $this->container['bill_to_site'] = $bill_to_site;

        return $this;
    }

    /**
     * Gets bill_unapproved_time_and_expense
     * @return bool
     */
    public function getBillUnapprovedTimeAndExpense()
    {
        return $this->container['bill_unapproved_time_and_expense'];
    }

    /**
     * Sets bill_unapproved_time_and_expense
     * @param bool $bill_unapproved_time_and_expense
     * @return $this
     */
    public function setBillUnapprovedTimeAndExpense($bill_unapproved_time_and_expense)
    {
        $this->container['bill_unapproved_time_and_expense'] = $bill_unapproved_time_and_expense;

        return $this;
    }

    /**
     * Gets board
     * @return \Spinen\ConnectWise\Clients\Sales\Model\ProjectBoardReference
     */
    public function getBoard()
    {
        return $this->container['board'];
    }

    /**
     * Sets board
     * @param \Spinen\ConnectWise\Clients\Sales\Model\ProjectBoardReference $board
     * @return $this
     */
    public function setBoard($board)
    {
        $this->container['board'] = $board;

        return $this;
    }

    /**
     * Gets budget_analysis
     * @return string
     */
    public function getBudgetAnalysis()
    {
        return $this->container['budget_analysis'];
    }

    /**
     * Sets budget_analysis
     * @param string $budget_analysis
     * @return $this
     */
    public function setBudgetAnalysis($budget_analysis)
    {
        $allowed_values = array('ActualHours', 'BillableHours');
        if (!is_null($budget_analysis) && (!in_array($budget_analysis, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'budget_analysis', must be one of 'ActualHours', 'BillableHours'");
        }
        $this->container['budget_analysis'] = $budget_analysis;

        return $this;
    }

    /**
     * Gets budget_flag
     * @return bool
     */
    public function getBudgetFlag()
    {
        return $this->container['budget_flag'];
    }

    /**
     * Sets budget_flag
     * @param bool $budget_flag
     * @return $this
     */
    public function setBudgetFlag($budget_flag)
    {
        $this->container['budget_flag'] = $budget_flag;

        return $this;
    }

    /**
     * Gets budget_hours
     * @return double
     */
    public function getBudgetHours()
    {
        return $this->container['budget_hours'];
    }

    /**
     * Sets budget_hours
     * @param double $budget_hours
     * @return $this
     */
    public function setBudgetHours($budget_hours)
    {
        $this->container['budget_hours'] = $budget_hours;

        return $this;
    }

    /**
     * Gets business_unit_id
     * @return int
     */
    public function getBusinessUnitId()
    {
        return $this->container['business_unit_id'];
    }

    /**
     * Sets business_unit_id
     * @param int $business_unit_id
     * @return $this
     */
    public function setBusinessUnitId($business_unit_id)
    {
        $this->container['business_unit_id'] = $business_unit_id;

        return $this;
    }

    /**
     * Gets company
     * @return \Spinen\ConnectWise\Clients\Sales\Model\CompanyReference
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     * @param \Spinen\ConnectWise\Clients\Sales\Model\CompanyReference $company
     * @return $this
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets contact
     * @return \Spinen\ConnectWise\Clients\Sales\Model\ContactReference
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     * @param \Spinen\ConnectWise\Clients\Sales\Model\ContactReference $contact
     * @return $this
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets customer_po
     * @return string
     */
    public function getCustomerPo()
    {
        return $this->container['customer_po'];
    }

    /**
     * Sets customer_po
     * @param string $customer_po
     * @return $this
     */
    public function setCustomerPo($customer_po)
    {
        if (!is_null($customer_po) && (strlen($customer_po) > 50)) {
            throw new \InvalidArgumentException('invalid length for $customer_po when calling Project., must be smaller than or equal to 50.');
        }

        $this->container['customer_po'] = $customer_po;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets downpayment
     * @return double
     */
    public function getDownpayment()
    {
        return $this->container['downpayment'];
    }

    /**
     * Sets downpayment
     * @param double $downpayment
     * @return $this
     */
    public function setDownpayment($downpayment)
    {
        $this->container['downpayment'] = $downpayment;

        return $this;
    }

    /**
     * Gets estimated_end
     * @return \DateTime
     */
    public function getEstimatedEnd()
    {
        return $this->container['estimated_end'];
    }

    /**
     * Sets estimated_end
     * @param \DateTime $estimated_end
     * @return $this
     */
    public function setEstimatedEnd($estimated_end)
    {
        $this->container['estimated_end'] = $estimated_end;

        return $this;
    }

    /**
     * Gets estimated_expense_revenue
     * @return double
     */
    public function getEstimatedExpenseRevenue()
    {
        return $this->container['estimated_expense_revenue'];
    }

    /**
     * Sets estimated_expense_revenue
     * @param double $estimated_expense_revenue
     * @return $this
     */
    public function setEstimatedExpenseRevenue($estimated_expense_revenue)
    {
        $this->container['estimated_expense_revenue'] = $estimated_expense_revenue;

        return $this;
    }

    /**
     * Gets estimated_hours
     * @return double
     */
    public function getEstimatedHours()
    {
        return $this->container['estimated_hours'];
    }

    /**
     * Sets estimated_hours
     * @param double $estimated_hours
     * @return $this
     */
    public function setEstimatedHours($estimated_hours)
    {
        $this->container['estimated_hours'] = $estimated_hours;

        return $this;
    }

    /**
     * Gets estimated_product_revenue
     * @return double
     */
    public function getEstimatedProductRevenue()
    {
        return $this->container['estimated_product_revenue'];
    }

    /**
     * Sets estimated_product_revenue
     * @param double $estimated_product_revenue
     * @return $this
     */
    public function setEstimatedProductRevenue($estimated_product_revenue)
    {
        $this->container['estimated_product_revenue'] = $estimated_product_revenue;

        return $this;
    }

    /**
     * Gets estimated_start
     * @return \DateTime
     */
    public function getEstimatedStart()
    {
        return $this->container['estimated_start'];
    }

    /**
     * Sets estimated_start
     * @param \DateTime $estimated_start
     * @return $this
     */
    public function setEstimatedStart($estimated_start)
    {
        $this->container['estimated_start'] = $estimated_start;

        return $this;
    }

    /**
     * Gets estimated_time_revenue
     * @return double
     */
    public function getEstimatedTimeRevenue()
    {
        return $this->container['estimated_time_revenue'];
    }

    /**
     * Sets estimated_time_revenue
     * @param double $estimated_time_revenue
     * @return $this
     */
    public function setEstimatedTimeRevenue($estimated_time_revenue)
    {
        $this->container['estimated_time_revenue'] = $estimated_time_revenue;

        return $this;
    }

    /**
     * Gets expense_approver
     * @return \Spinen\ConnectWise\Clients\Sales\Model\MemberReference
     */
    public function getExpenseApprover()
    {
        return $this->container['expense_approver'];
    }

    /**
     * Sets expense_approver
     * @param \Spinen\ConnectWise\Clients\Sales\Model\MemberReference $expense_approver
     * @return $this
     */
    public function setExpenseApprover($expense_approver)
    {
        $this->container['expense_approver'] = $expense_approver;

        return $this;
    }

    /**
     * Gets include_dependencies_flag
     * @return bool
     */
    public function getIncludeDependenciesFlag()
    {
        return $this->container['include_dependencies_flag'];
    }

    /**
     * Sets include_dependencies_flag
     * @param bool $include_dependencies_flag
     * @return $this
     */
    public function setIncludeDependenciesFlag($include_dependencies_flag)
    {
        $this->container['include_dependencies_flag'] = $include_dependencies_flag;

        return $this;
    }

    /**
     * Gets include_estimates_flag
     * @return bool
     */
    public function getIncludeEstimatesFlag()
    {
        return $this->container['include_estimates_flag'];
    }

    /**
     * Sets include_estimates_flag
     * @param bool $include_estimates_flag
     * @return $this
     */
    public function setIncludeEstimatesFlag($include_estimates_flag)
    {
        $this->container['include_estimates_flag'] = $include_estimates_flag;

        return $this;
    }

    /**
     * Gets location_id
     * @return int
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     * @param int $location_id
     * @return $this
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets manager
     * @return \Spinen\ConnectWise\Clients\Sales\Model\MemberReference
     */
    public function getManager()
    {
        return $this->container['manager'];
    }

    /**
     * Sets manager
     * @param \Spinen\ConnectWise\Clients\Sales\Model\MemberReference $manager
     * @return $this
     */
    public function setManager($manager)
    {
        $this->container['manager'] = $manager;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        if ((strlen($name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Project., must be smaller than or equal to 100.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets opportunity
     * @return \Spinen\ConnectWise\Clients\Sales\Model\OpportunityReference
     */
    public function getOpportunity()
    {
        return $this->container['opportunity'];
    }

    /**
     * Sets opportunity
     * @param \Spinen\ConnectWise\Clients\Sales\Model\OpportunityReference $opportunity
     * @return $this
     */
    public function setOpportunity($opportunity)
    {
        $this->container['opportunity'] = $opportunity;

        return $this;
    }

    /**
     * Gets project_template_id
     * @return int
     */
    public function getProjectTemplateId()
    {
        return $this->container['project_template_id'];
    }

    /**
     * Sets project_template_id
     * @param int $project_template_id
     * @return $this
     */
    public function setProjectTemplateId($project_template_id)
    {
        $this->container['project_template_id'] = $project_template_id;

        return $this;
    }

    /**
     * Gets restrict_down_payment_flag
     * @return bool
     */
    public function getRestrictDownPaymentFlag()
    {
        return $this->container['restrict_down_payment_flag'];
    }

    /**
     * Sets restrict_down_payment_flag
     * @param bool $restrict_down_payment_flag
     * @return $this
     */
    public function setRestrictDownPaymentFlag($restrict_down_payment_flag)
    {
        $this->container['restrict_down_payment_flag'] = $restrict_down_payment_flag;

        return $this;
    }

    /**
     * Gets scheduled_end
     * @return string
     */
    public function getScheduledEnd()
    {
        return $this->container['scheduled_end'];
    }

    /**
     * Sets scheduled_end
     * @param string $scheduled_end
     * @return $this
     */
    public function setScheduledEnd($scheduled_end)
    {
        $this->container['scheduled_end'] = $scheduled_end;

        return $this;
    }

    /**
     * Gets scheduled_hours
     * @return double
     */
    public function getScheduledHours()
    {
        return $this->container['scheduled_hours'];
    }

    /**
     * Sets scheduled_hours
     * @param double $scheduled_hours
     * @return $this
     */
    public function setScheduledHours($scheduled_hours)
    {
        $this->container['scheduled_hours'] = $scheduled_hours;

        return $this;
    }

    /**
     * Gets scheduled_start
     * @return string
     */
    public function getScheduledStart()
    {
        return $this->container['scheduled_start'];
    }

    /**
     * Sets scheduled_start
     * @param string $scheduled_start
     * @return $this
     */
    public function setScheduledStart($scheduled_start)
    {
        $this->container['scheduled_start'] = $scheduled_start;

        return $this;
    }

    /**
     * Gets ship_to_company
     * @return \Spinen\ConnectWise\Clients\Sales\Model\CompanyReference
     */
    public function getShipToCompany()
    {
        return $this->container['ship_to_company'];
    }

    /**
     * Sets ship_to_company
     * @param \Spinen\ConnectWise\Clients\Sales\Model\CompanyReference $ship_to_company
     * @return $this
     */
    public function setShipToCompany($ship_to_company)
    {
        $this->container['ship_to_company'] = $ship_to_company;

        return $this;
    }

    /**
     * Gets ship_to_contact
     * @return \Spinen\ConnectWise\Clients\Sales\Model\ContactReference
     */
    public function getShipToContact()
    {
        return $this->container['ship_to_contact'];
    }

    /**
     * Sets ship_to_contact
     * @param \Spinen\ConnectWise\Clients\Sales\Model\ContactReference $ship_to_contact
     * @return $this
     */
    public function setShipToContact($ship_to_contact)
    {
        $this->container['ship_to_contact'] = $ship_to_contact;

        return $this;
    }

    /**
     * Gets ship_to_site
     * @return \Spinen\ConnectWise\Clients\Sales\Model\SiteReference
     */
    public function getShipToSite()
    {
        return $this->container['ship_to_site'];
    }

    /**
     * Sets ship_to_site
     * @param \Spinen\ConnectWise\Clients\Sales\Model\SiteReference $ship_to_site
     * @return $this
     */
    public function setShipToSite($ship_to_site)
    {
        $this->container['ship_to_site'] = $ship_to_site;

        return $this;
    }

    /**
     * Gets site
     * @return \Spinen\ConnectWise\Clients\Sales\Model\SiteReference
     */
    public function getSite()
    {
        return $this->container['site'];
    }

    /**
     * Sets site
     * @param \Spinen\ConnectWise\Clients\Sales\Model\SiteReference $site
     * @return $this
     */
    public function setSite($site)
    {
        $this->container['site'] = $site;

        return $this;
    }

    /**
     * Gets status
     * @return \Spinen\ConnectWise\Clients\Sales\Model\ProjectStatusReference
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param \Spinen\ConnectWise\Clients\Sales\Model\ProjectStatusReference $status
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets time_approver
     * @return \Spinen\ConnectWise\Clients\Sales\Model\MemberReference
     */
    public function getTimeApprover()
    {
        return $this->container['time_approver'];
    }

    /**
     * Sets time_approver
     * @param \Spinen\ConnectWise\Clients\Sales\Model\MemberReference $time_approver
     * @return $this
     */
    public function setTimeApprover($time_approver)
    {
        $this->container['time_approver'] = $time_approver;

        return $this;
    }

    /**
     * Gets type
     * @return \Spinen\ConnectWise\Clients\Sales\Model\ProjectTypeReference
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param \Spinen\ConnectWise\Clients\Sales\Model\ProjectTypeReference $type
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Spinen\ConnectWise\Clients\Sales\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Spinen\ConnectWise\Clients\Sales\ObjectSerializer::sanitizeForSerialization($this));
    }
}


