<?php
/**
 * ProductRecurring
 *
 * PHP version 5
 *
 * @category Class
 * @package  Spinen\ConnectWise\Clients\Sales
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sales API
 *
 * ConnectWise Sales API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: platform@connectwise.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Clients\Sales\Spinen\ConnectWise\Clients\Sales\Model;

use \ArrayAccess;

/**
 * ProductRecurring Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Spinen\ConnectWise\Clients\Sales
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ProductRecurring implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ProductRecurring';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'recurring_revenue' => 'double',
        'recurring_cost' => 'double',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'bill_cycle_id' => 'int',
        'cycles' => 'int',
        'cycle_type' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'recurring_revenue' => 'recurringRevenue',
        'recurring_cost' => 'recurringCost',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'bill_cycle_id' => 'billCycleId',
        'cycles' => 'cycles',
        'cycle_type' => 'cycleType'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'recurring_revenue' => 'setRecurringRevenue',
        'recurring_cost' => 'setRecurringCost',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'bill_cycle_id' => 'setBillCycleId',
        'cycles' => 'setCycles',
        'cycle_type' => 'setCycleType'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'recurring_revenue' => 'getRecurringRevenue',
        'recurring_cost' => 'getRecurringCost',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'bill_cycle_id' => 'getBillCycleId',
        'cycles' => 'getCycles',
        'cycle_type' => 'getCycleType'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const CYCLE_TYPE_CALENDAR_YEAR = 'CalendarYear';
    const CYCLE_TYPE_CONTRACT_YEAR = 'ContractYear';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getCycleTypeAllowableValues()
    {
        return [
            self::CYCLE_TYPE_CALENDAR_YEAR,
            self::CYCLE_TYPE_CONTRACT_YEAR,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['recurring_revenue'] = isset($data['recurring_revenue']) ? $data['recurring_revenue'] : null;
        $this->container['recurring_cost'] = isset($data['recurring_cost']) ? $data['recurring_cost'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['bill_cycle_id'] = isset($data['bill_cycle_id']) ? $data['bill_cycle_id'] : null;
        $this->container['cycles'] = isset($data['cycles']) ? $data['cycles'] : null;
        $this->container['cycle_type'] = isset($data['cycle_type']) ? $data['cycle_type'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['recurring_revenue'] === null) {
            $invalid_properties[] = "'recurring_revenue' can't be null";
        }
        if ($this->container['recurring_cost'] === null) {
            $invalid_properties[] = "'recurring_cost' can't be null";
        }
        if ($this->container['start_date'] === null) {
            $invalid_properties[] = "'start_date' can't be null";
        }
        if ($this->container['end_date'] === null) {
            $invalid_properties[] = "'end_date' can't be null";
        }
        if ($this->container['bill_cycle_id'] === null) {
            $invalid_properties[] = "'bill_cycle_id' can't be null";
        }
        if ($this->container['cycles'] === null) {
            $invalid_properties[] = "'cycles' can't be null";
        }
        if ($this->container['cycle_type'] === null) {
            $invalid_properties[] = "'cycle_type' can't be null";
        }
        $allowed_values = ["CalendarYear", "ContractYear"];
        if (!in_array($this->container['cycle_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'cycle_type', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['recurring_revenue'] === null) {
            return false;
        }
        if ($this->container['recurring_cost'] === null) {
            return false;
        }
        if ($this->container['start_date'] === null) {
            return false;
        }
        if ($this->container['end_date'] === null) {
            return false;
        }
        if ($this->container['bill_cycle_id'] === null) {
            return false;
        }
        if ($this->container['cycles'] === null) {
            return false;
        }
        if ($this->container['cycle_type'] === null) {
            return false;
        }
        $allowed_values = ["CalendarYear", "ContractYear"];
        if (!in_array($this->container['cycle_type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets recurring_revenue
     * @return double
     */
    public function getRecurringRevenue()
    {
        return $this->container['recurring_revenue'];
    }

    /**
     * Sets recurring_revenue
     * @param double $recurring_revenue
     * @return $this
     */
    public function setRecurringRevenue($recurring_revenue)
    {
        $this->container['recurring_revenue'] = $recurring_revenue;

        return $this;
    }

    /**
     * Gets recurring_cost
     * @return double
     */
    public function getRecurringCost()
    {
        return $this->container['recurring_cost'];
    }

    /**
     * Sets recurring_cost
     * @param double $recurring_cost
     * @return $this
     */
    public function setRecurringCost($recurring_cost)
    {
        $this->container['recurring_cost'] = $recurring_cost;

        return $this;
    }

    /**
     * Gets start_date
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     * @param \DateTime $start_date
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     * @param \DateTime $end_date
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets bill_cycle_id
     * @return int
     */
    public function getBillCycleId()
    {
        return $this->container['bill_cycle_id'];
    }

    /**
     * Sets bill_cycle_id
     * @param int $bill_cycle_id
     * @return $this
     */
    public function setBillCycleId($bill_cycle_id)
    {
        $this->container['bill_cycle_id'] = $bill_cycle_id;

        return $this;
    }

    /**
     * Gets cycles
     * @return int
     */
    public function getCycles()
    {
        return $this->container['cycles'];
    }

    /**
     * Sets cycles
     * @param int $cycles
     * @return $this
     */
    public function setCycles($cycles)
    {
        $this->container['cycles'] = $cycles;

        return $this;
    }

    /**
     * Gets cycle_type
     * @return string
     */
    public function getCycleType()
    {
        return $this->container['cycle_type'];
    }

    /**
     * Sets cycle_type
     * @param string $cycle_type
     * @return $this
     */
    public function setCycleType($cycle_type)
    {
        $allowed_values = array('CalendarYear', 'ContractYear');
        if ((!in_array($cycle_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'cycle_type', must be one of 'CalendarYear', 'ContractYear'");
        }
        $this->container['cycle_type'] = $cycle_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Spinen\ConnectWise\Clients\Sales\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Spinen\ConnectWise\Clients\Sales\ObjectSerializer::sanitizeForSerialization($this));
    }
}


