<?php
/**
 * Ticket
 *
 * PHP version 5
 *
 * @category Class
 * @package  Spinen\ConnectWise\Clients\Sales
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sales API
 *
 * ConnectWise Sales API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: platform@connectwise.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Clients\Sales\Model;

use \ArrayAccess;

/**
 * Ticket Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Spinen\ConnectWise\Clients\Sales
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Ticket implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Ticket';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'summary' => 'string',
        'record_type' => 'string',
        'board' => '\Spinen\ConnectWise\Clients\Sales\Model\BoardReference',
        'status' => '\Spinen\ConnectWise\Clients\Sales\Model\ServiceStatusReference',
        'project' => '\Spinen\ConnectWise\Clients\Sales\Model\ProjectReference',
        'phase' => '\Spinen\ConnectWise\Clients\Sales\Model\ProjectPhaseReference',
        'wbs_code' => 'string',
        'company' => '\Spinen\ConnectWise\Clients\Sales\Model\CompanyReference',
        'site' => '\Spinen\ConnectWise\Clients\Sales\Model\SiteReference',
        'site_name' => 'string',
        'address_line1' => 'string',
        'address_line2' => 'string',
        'city' => 'string',
        'state_identifier' => 'string',
        'zip' => 'string',
        'country' => '\Spinen\ConnectWise\Clients\Sales\Model\CountryReference',
        'contact' => '\Spinen\ConnectWise\Clients\Sales\Model\ContactReference',
        'contact_name' => 'string',
        'contact_phone_number' => 'string',
        'contact_phone_extension' => 'string',
        'contact_email_address' => 'string',
        'type' => '\Spinen\ConnectWise\Clients\Sales\Model\ServiceTypeReference',
        'sub_type' => '\Spinen\ConnectWise\Clients\Sales\Model\ServiceSubTypeReference',
        'item' => '\Spinen\ConnectWise\Clients\Sales\Model\ServiceItemReference',
        'team' => '\Spinen\ConnectWise\Clients\Sales\Model\ServiceTeamReference',
        'owner' => '\Spinen\ConnectWise\Clients\Sales\Model\MemberReference',
        'priority' => '\Spinen\ConnectWise\Clients\Sales\Model\PriorityReference',
        'service_location' => '\Spinen\ConnectWise\Clients\Sales\Model\ServiceLocationReference',
        'source' => '\Spinen\ConnectWise\Clients\Sales\Model\ServiceSourceReference',
        'required_date' => '\DateTime',
        'budget_hours' => 'double',
        'opportunity' => '\Spinen\ConnectWise\Clients\Sales\Model\OpportunityReference',
        'agreement' => '\Spinen\ConnectWise\Clients\Sales\Model\AgreementReference',
        'severity' => 'string',
        'impact' => 'string',
        'external_x_ref' => 'string',
        'po_number' => 'string',
        'knowledge_base_category_id' => 'int',
        'knowledge_base_sub_category_id' => 'int',
        'allow_all_clients_portal_view' => 'bool',
        'customer_updated_flag' => 'bool',
        'automatic_email_contact_flag' => 'bool',
        'automatic_email_resource_flag' => 'bool',
        'automatic_email_cc_flag' => 'bool',
        'automatic_email_cc' => 'string',
        'initial_description' => 'string',
        'initial_internal_analysis' => 'string',
        'initial_resolution' => 'string',
        'contact_email_lookup' => 'string',
        'process_notifications' => 'bool',
        'skip_callback' => 'bool',
        'closed_date' => 'string',
        'closed_by' => 'string',
        'closed_flag' => 'bool',
        'date_entered' => 'string',
        'entered_by' => 'string',
        'actual_hours' => 'double',
        'approved' => 'bool',
        'sub_billing_method' => 'string',
        'sub_billing_amount' => 'double',
        'sub_date_accepted' => 'string',
        'date_resolved' => 'string',
        'date_resplan' => 'string',
        'date_responded' => 'string',
        'resolve_minutes' => 'int',
        'res_plan_minutes' => 'int',
        'respond_minutes' => 'int',
        'is_in_sla' => 'bool',
        'knowledge_base_link_id' => 'int',
        'resources' => 'string',
        'parent_ticket_id' => 'int',
        'has_child_ticket' => 'bool',
        'knowledge_base_link_type' => 'string',
        'bill_time' => 'string',
        'bill_expenses' => 'string',
        'bill_products' => 'string',
        'predecessor_type' => 'string',
        'predecessor_id' => 'int',
        'predecessor_closed_flag' => 'bool',
        'lag_days' => 'int',
        'lag_nonworking_days_flag' => 'bool',
        'estimated_start_date' => '\DateTime',
        'duration' => 'int',
        'location_id' => 'int',
        'business_unit_id' => 'int',
        'mobile_guid' => '\Spinen\ConnectWise\Clients\Sales\Model\Guid',
        'sla' => '\Spinen\ConnectWise\Clients\Sales\Model\SLAReference',
        '_info' => '\Spinen\ConnectWise\Clients\Sales\Model\Metadata',
        'custom_fields' => '\Spinen\ConnectWise\Clients\Sales\Model\CustomFieldValue[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'summary' => 'summary',
        'record_type' => 'recordType',
        'board' => 'board',
        'status' => 'status',
        'project' => 'project',
        'phase' => 'phase',
        'wbs_code' => 'wbsCode',
        'company' => 'company',
        'site' => 'site',
        'site_name' => 'siteName',
        'address_line1' => 'addressLine1',
        'address_line2' => 'addressLine2',
        'city' => 'city',
        'state_identifier' => 'stateIdentifier',
        'zip' => 'zip',
        'country' => 'country',
        'contact' => 'contact',
        'contact_name' => 'contactName',
        'contact_phone_number' => 'contactPhoneNumber',
        'contact_phone_extension' => 'contactPhoneExtension',
        'contact_email_address' => 'contactEmailAddress',
        'type' => 'type',
        'sub_type' => 'subType',
        'item' => 'item',
        'team' => 'team',
        'owner' => 'owner',
        'priority' => 'priority',
        'service_location' => 'serviceLocation',
        'source' => 'source',
        'required_date' => 'requiredDate',
        'budget_hours' => 'budgetHours',
        'opportunity' => 'opportunity',
        'agreement' => 'agreement',
        'severity' => 'severity',
        'impact' => 'impact',
        'external_x_ref' => 'externalXRef',
        'po_number' => 'poNumber',
        'knowledge_base_category_id' => 'knowledgeBaseCategoryId',
        'knowledge_base_sub_category_id' => 'knowledgeBaseSubCategoryId',
        'allow_all_clients_portal_view' => 'allowAllClientsPortalView',
        'customer_updated_flag' => 'customerUpdatedFlag',
        'automatic_email_contact_flag' => 'automaticEmailContactFlag',
        'automatic_email_resource_flag' => 'automaticEmailResourceFlag',
        'automatic_email_cc_flag' => 'automaticEmailCcFlag',
        'automatic_email_cc' => 'automaticEmailCc',
        'initial_description' => 'initialDescription',
        'initial_internal_analysis' => 'initialInternalAnalysis',
        'initial_resolution' => 'initialResolution',
        'contact_email_lookup' => 'contactEmailLookup',
        'process_notifications' => 'processNotifications',
        'skip_callback' => 'skipCallback',
        'closed_date' => 'closedDate',
        'closed_by' => 'closedBy',
        'closed_flag' => 'closedFlag',
        'date_entered' => 'dateEntered',
        'entered_by' => 'enteredBy',
        'actual_hours' => 'actualHours',
        'approved' => 'approved',
        'sub_billing_method' => 'subBillingMethod',
        'sub_billing_amount' => 'subBillingAmount',
        'sub_date_accepted' => 'subDateAccepted',
        'date_resolved' => 'dateResolved',
        'date_resplan' => 'dateResplan',
        'date_responded' => 'dateResponded',
        'resolve_minutes' => 'resolveMinutes',
        'res_plan_minutes' => 'resPlanMinutes',
        'respond_minutes' => 'respondMinutes',
        'is_in_sla' => 'isInSla',
        'knowledge_base_link_id' => 'knowledgeBaseLinkId',
        'resources' => 'resources',
        'parent_ticket_id' => 'parentTicketId',
        'has_child_ticket' => 'hasChildTicket',
        'knowledge_base_link_type' => 'knowledgeBaseLinkType',
        'bill_time' => 'billTime',
        'bill_expenses' => 'billExpenses',
        'bill_products' => 'billProducts',
        'predecessor_type' => 'predecessorType',
        'predecessor_id' => 'predecessorId',
        'predecessor_closed_flag' => 'predecessorClosedFlag',
        'lag_days' => 'lagDays',
        'lag_nonworking_days_flag' => 'lagNonworkingDaysFlag',
        'estimated_start_date' => 'estimatedStartDate',
        'duration' => 'duration',
        'location_id' => 'locationId',
        'business_unit_id' => 'businessUnitId',
        'mobile_guid' => 'mobileGuid',
        'sla' => 'sla',
        '_info' => '_info',
        'custom_fields' => 'customFields'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'summary' => 'setSummary',
        'record_type' => 'setRecordType',
        'board' => 'setBoard',
        'status' => 'setStatus',
        'project' => 'setProject',
        'phase' => 'setPhase',
        'wbs_code' => 'setWbsCode',
        'company' => 'setCompany',
        'site' => 'setSite',
        'site_name' => 'setSiteName',
        'address_line1' => 'setAddressLine1',
        'address_line2' => 'setAddressLine2',
        'city' => 'setCity',
        'state_identifier' => 'setStateIdentifier',
        'zip' => 'setZip',
        'country' => 'setCountry',
        'contact' => 'setContact',
        'contact_name' => 'setContactName',
        'contact_phone_number' => 'setContactPhoneNumber',
        'contact_phone_extension' => 'setContactPhoneExtension',
        'contact_email_address' => 'setContactEmailAddress',
        'type' => 'setType',
        'sub_type' => 'setSubType',
        'item' => 'setItem',
        'team' => 'setTeam',
        'owner' => 'setOwner',
        'priority' => 'setPriority',
        'service_location' => 'setServiceLocation',
        'source' => 'setSource',
        'required_date' => 'setRequiredDate',
        'budget_hours' => 'setBudgetHours',
        'opportunity' => 'setOpportunity',
        'agreement' => 'setAgreement',
        'severity' => 'setSeverity',
        'impact' => 'setImpact',
        'external_x_ref' => 'setExternalXRef',
        'po_number' => 'setPoNumber',
        'knowledge_base_category_id' => 'setKnowledgeBaseCategoryId',
        'knowledge_base_sub_category_id' => 'setKnowledgeBaseSubCategoryId',
        'allow_all_clients_portal_view' => 'setAllowAllClientsPortalView',
        'customer_updated_flag' => 'setCustomerUpdatedFlag',
        'automatic_email_contact_flag' => 'setAutomaticEmailContactFlag',
        'automatic_email_resource_flag' => 'setAutomaticEmailResourceFlag',
        'automatic_email_cc_flag' => 'setAutomaticEmailCcFlag',
        'automatic_email_cc' => 'setAutomaticEmailCc',
        'initial_description' => 'setInitialDescription',
        'initial_internal_analysis' => 'setInitialInternalAnalysis',
        'initial_resolution' => 'setInitialResolution',
        'contact_email_lookup' => 'setContactEmailLookup',
        'process_notifications' => 'setProcessNotifications',
        'skip_callback' => 'setSkipCallback',
        'closed_date' => 'setClosedDate',
        'closed_by' => 'setClosedBy',
        'closed_flag' => 'setClosedFlag',
        'date_entered' => 'setDateEntered',
        'entered_by' => 'setEnteredBy',
        'actual_hours' => 'setActualHours',
        'approved' => 'setApproved',
        'sub_billing_method' => 'setSubBillingMethod',
        'sub_billing_amount' => 'setSubBillingAmount',
        'sub_date_accepted' => 'setSubDateAccepted',
        'date_resolved' => 'setDateResolved',
        'date_resplan' => 'setDateResplan',
        'date_responded' => 'setDateResponded',
        'resolve_minutes' => 'setResolveMinutes',
        'res_plan_minutes' => 'setResPlanMinutes',
        'respond_minutes' => 'setRespondMinutes',
        'is_in_sla' => 'setIsInSla',
        'knowledge_base_link_id' => 'setKnowledgeBaseLinkId',
        'resources' => 'setResources',
        'parent_ticket_id' => 'setParentTicketId',
        'has_child_ticket' => 'setHasChildTicket',
        'knowledge_base_link_type' => 'setKnowledgeBaseLinkType',
        'bill_time' => 'setBillTime',
        'bill_expenses' => 'setBillExpenses',
        'bill_products' => 'setBillProducts',
        'predecessor_type' => 'setPredecessorType',
        'predecessor_id' => 'setPredecessorId',
        'predecessor_closed_flag' => 'setPredecessorClosedFlag',
        'lag_days' => 'setLagDays',
        'lag_nonworking_days_flag' => 'setLagNonworkingDaysFlag',
        'estimated_start_date' => 'setEstimatedStartDate',
        'duration' => 'setDuration',
        'location_id' => 'setLocationId',
        'business_unit_id' => 'setBusinessUnitId',
        'mobile_guid' => 'setMobileGuid',
        'sla' => 'setSla',
        '_info' => 'setInfo',
        'custom_fields' => 'setCustomFields'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'summary' => 'getSummary',
        'record_type' => 'getRecordType',
        'board' => 'getBoard',
        'status' => 'getStatus',
        'project' => 'getProject',
        'phase' => 'getPhase',
        'wbs_code' => 'getWbsCode',
        'company' => 'getCompany',
        'site' => 'getSite',
        'site_name' => 'getSiteName',
        'address_line1' => 'getAddressLine1',
        'address_line2' => 'getAddressLine2',
        'city' => 'getCity',
        'state_identifier' => 'getStateIdentifier',
        'zip' => 'getZip',
        'country' => 'getCountry',
        'contact' => 'getContact',
        'contact_name' => 'getContactName',
        'contact_phone_number' => 'getContactPhoneNumber',
        'contact_phone_extension' => 'getContactPhoneExtension',
        'contact_email_address' => 'getContactEmailAddress',
        'type' => 'getType',
        'sub_type' => 'getSubType',
        'item' => 'getItem',
        'team' => 'getTeam',
        'owner' => 'getOwner',
        'priority' => 'getPriority',
        'service_location' => 'getServiceLocation',
        'source' => 'getSource',
        'required_date' => 'getRequiredDate',
        'budget_hours' => 'getBudgetHours',
        'opportunity' => 'getOpportunity',
        'agreement' => 'getAgreement',
        'severity' => 'getSeverity',
        'impact' => 'getImpact',
        'external_x_ref' => 'getExternalXRef',
        'po_number' => 'getPoNumber',
        'knowledge_base_category_id' => 'getKnowledgeBaseCategoryId',
        'knowledge_base_sub_category_id' => 'getKnowledgeBaseSubCategoryId',
        'allow_all_clients_portal_view' => 'getAllowAllClientsPortalView',
        'customer_updated_flag' => 'getCustomerUpdatedFlag',
        'automatic_email_contact_flag' => 'getAutomaticEmailContactFlag',
        'automatic_email_resource_flag' => 'getAutomaticEmailResourceFlag',
        'automatic_email_cc_flag' => 'getAutomaticEmailCcFlag',
        'automatic_email_cc' => 'getAutomaticEmailCc',
        'initial_description' => 'getInitialDescription',
        'initial_internal_analysis' => 'getInitialInternalAnalysis',
        'initial_resolution' => 'getInitialResolution',
        'contact_email_lookup' => 'getContactEmailLookup',
        'process_notifications' => 'getProcessNotifications',
        'skip_callback' => 'getSkipCallback',
        'closed_date' => 'getClosedDate',
        'closed_by' => 'getClosedBy',
        'closed_flag' => 'getClosedFlag',
        'date_entered' => 'getDateEntered',
        'entered_by' => 'getEnteredBy',
        'actual_hours' => 'getActualHours',
        'approved' => 'getApproved',
        'sub_billing_method' => 'getSubBillingMethod',
        'sub_billing_amount' => 'getSubBillingAmount',
        'sub_date_accepted' => 'getSubDateAccepted',
        'date_resolved' => 'getDateResolved',
        'date_resplan' => 'getDateResplan',
        'date_responded' => 'getDateResponded',
        'resolve_minutes' => 'getResolveMinutes',
        'res_plan_minutes' => 'getResPlanMinutes',
        'respond_minutes' => 'getRespondMinutes',
        'is_in_sla' => 'getIsInSla',
        'knowledge_base_link_id' => 'getKnowledgeBaseLinkId',
        'resources' => 'getResources',
        'parent_ticket_id' => 'getParentTicketId',
        'has_child_ticket' => 'getHasChildTicket',
        'knowledge_base_link_type' => 'getKnowledgeBaseLinkType',
        'bill_time' => 'getBillTime',
        'bill_expenses' => 'getBillExpenses',
        'bill_products' => 'getBillProducts',
        'predecessor_type' => 'getPredecessorType',
        'predecessor_id' => 'getPredecessorId',
        'predecessor_closed_flag' => 'getPredecessorClosedFlag',
        'lag_days' => 'getLagDays',
        'lag_nonworking_days_flag' => 'getLagNonworkingDaysFlag',
        'estimated_start_date' => 'getEstimatedStartDate',
        'duration' => 'getDuration',
        'location_id' => 'getLocationId',
        'business_unit_id' => 'getBusinessUnitId',
        'mobile_guid' => 'getMobileGuid',
        'sla' => 'getSla',
        '_info' => 'getInfo',
        'custom_fields' => 'getCustomFields'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const RECORD_TYPE_SERVICE_TICKET = 'ServiceTicket';
    const RECORD_TYPE_PROJECT_TICKET = 'ProjectTicket';
    const RECORD_TYPE_PROJECT_ISSUE = 'ProjectIssue';
    const SEVERITY_LOW = 'Low';
    const SEVERITY_MEDIUM = 'Medium';
    const SEVERITY_HIGH = 'High';
    const IMPACT_LOW = 'Low';
    const IMPACT_MEDIUM = 'Medium';
    const IMPACT_HIGH = 'High';
    const SUB_BILLING_METHOD_ACTUAL_RATES = 'ActualRates';
    const SUB_BILLING_METHOD_FIXED_FEE = 'FixedFee';
    const SUB_BILLING_METHOD_NOT_TO_EXCEED = 'NotToExceed';
    const SUB_BILLING_METHOD_OVERRIDE_RATE = 'OverrideRate';
    const KNOWLEDGE_BASE_LINK_TYPE_SERVICE_TICKET = 'ServiceTicket';
    const KNOWLEDGE_BASE_LINK_TYPE_PROJECT_TICKET = 'ProjectTicket';
    const KNOWLEDGE_BASE_LINK_TYPE_PROJECT_ISSUE = 'ProjectIssue';
    const KNOWLEDGE_BASE_LINK_TYPE_KNOWLEDGE_BASE_ARTICLE = 'KnowledgeBaseArticle';
    const KNOWLEDGE_BASE_LINK_TYPE_TIME = 'Time';
    const KNOWLEDGE_BASE_LINK_TYPE_ACTIVITY = 'Activity';
    const BILL_TIME_BILLABLE = 'Billable';
    const BILL_TIME_DO_NOT_BILL = 'DoNotBill';
    const BILL_TIME_NO_CHARGE = 'NoCharge';
    const BILL_TIME_NO_DEFAULT = 'NoDefault';
    const BILL_EXPENSES_BILLABLE = 'Billable';
    const BILL_EXPENSES_DO_NOT_BILL = 'DoNotBill';
    const BILL_EXPENSES_NO_CHARGE = 'NoCharge';
    const BILL_EXPENSES_NO_DEFAULT = 'NoDefault';
    const BILL_PRODUCTS_BILLABLE = 'Billable';
    const BILL_PRODUCTS_DO_NOT_BILL = 'DoNotBill';
    const BILL_PRODUCTS_NO_CHARGE = 'NoCharge';
    const BILL_PRODUCTS_NO_DEFAULT = 'NoDefault';
    const PREDECESSOR_TYPE_TICKET = 'Ticket';
    const PREDECESSOR_TYPE_PHASE = 'Phase';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getRecordTypeAllowableValues()
    {
        return [
            self::RECORD_TYPE_SERVICE_TICKET,
            self::RECORD_TYPE_PROJECT_TICKET,
            self::RECORD_TYPE_PROJECT_ISSUE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getSeverityAllowableValues()
    {
        return [
            self::SEVERITY_LOW,
            self::SEVERITY_MEDIUM,
            self::SEVERITY_HIGH,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getImpactAllowableValues()
    {
        return [
            self::IMPACT_LOW,
            self::IMPACT_MEDIUM,
            self::IMPACT_HIGH,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getSubBillingMethodAllowableValues()
    {
        return [
            self::SUB_BILLING_METHOD_ACTUAL_RATES,
            self::SUB_BILLING_METHOD_FIXED_FEE,
            self::SUB_BILLING_METHOD_NOT_TO_EXCEED,
            self::SUB_BILLING_METHOD_OVERRIDE_RATE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getKnowledgeBaseLinkTypeAllowableValues()
    {
        return [
            self::KNOWLEDGE_BASE_LINK_TYPE_SERVICE_TICKET,
            self::KNOWLEDGE_BASE_LINK_TYPE_PROJECT_TICKET,
            self::KNOWLEDGE_BASE_LINK_TYPE_PROJECT_ISSUE,
            self::KNOWLEDGE_BASE_LINK_TYPE_KNOWLEDGE_BASE_ARTICLE,
            self::KNOWLEDGE_BASE_LINK_TYPE_TIME,
            self::KNOWLEDGE_BASE_LINK_TYPE_ACTIVITY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getBillTimeAllowableValues()
    {
        return [
            self::BILL_TIME_BILLABLE,
            self::BILL_TIME_DO_NOT_BILL,
            self::BILL_TIME_NO_CHARGE,
            self::BILL_TIME_NO_DEFAULT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getBillExpensesAllowableValues()
    {
        return [
            self::BILL_EXPENSES_BILLABLE,
            self::BILL_EXPENSES_DO_NOT_BILL,
            self::BILL_EXPENSES_NO_CHARGE,
            self::BILL_EXPENSES_NO_DEFAULT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getBillProductsAllowableValues()
    {
        return [
            self::BILL_PRODUCTS_BILLABLE,
            self::BILL_PRODUCTS_DO_NOT_BILL,
            self::BILL_PRODUCTS_NO_CHARGE,
            self::BILL_PRODUCTS_NO_DEFAULT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getPredecessorTypeAllowableValues()
    {
        return [
            self::PREDECESSOR_TYPE_TICKET,
            self::PREDECESSOR_TYPE_PHASE,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['summary'] = isset($data['summary']) ? $data['summary'] : null;
        $this->container['record_type'] = isset($data['record_type']) ? $data['record_type'] : null;
        $this->container['board'] = isset($data['board']) ? $data['board'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['phase'] = isset($data['phase']) ? $data['phase'] : null;
        $this->container['wbs_code'] = isset($data['wbs_code']) ? $data['wbs_code'] : null;
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
        $this->container['site'] = isset($data['site']) ? $data['site'] : null;
        $this->container['site_name'] = isset($data['site_name']) ? $data['site_name'] : null;
        $this->container['address_line1'] = isset($data['address_line1']) ? $data['address_line1'] : null;
        $this->container['address_line2'] = isset($data['address_line2']) ? $data['address_line2'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['state_identifier'] = isset($data['state_identifier']) ? $data['state_identifier'] : null;
        $this->container['zip'] = isset($data['zip']) ? $data['zip'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['contact'] = isset($data['contact']) ? $data['contact'] : null;
        $this->container['contact_name'] = isset($data['contact_name']) ? $data['contact_name'] : null;
        $this->container['contact_phone_number'] = isset($data['contact_phone_number']) ? $data['contact_phone_number'] : null;
        $this->container['contact_phone_extension'] = isset($data['contact_phone_extension']) ? $data['contact_phone_extension'] : null;
        $this->container['contact_email_address'] = isset($data['contact_email_address']) ? $data['contact_email_address'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['sub_type'] = isset($data['sub_type']) ? $data['sub_type'] : null;
        $this->container['item'] = isset($data['item']) ? $data['item'] : null;
        $this->container['team'] = isset($data['team']) ? $data['team'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['service_location'] = isset($data['service_location']) ? $data['service_location'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['required_date'] = isset($data['required_date']) ? $data['required_date'] : null;
        $this->container['budget_hours'] = isset($data['budget_hours']) ? $data['budget_hours'] : null;
        $this->container['opportunity'] = isset($data['opportunity']) ? $data['opportunity'] : null;
        $this->container['agreement'] = isset($data['agreement']) ? $data['agreement'] : null;
        $this->container['severity'] = isset($data['severity']) ? $data['severity'] : null;
        $this->container['impact'] = isset($data['impact']) ? $data['impact'] : null;
        $this->container['external_x_ref'] = isset($data['external_x_ref']) ? $data['external_x_ref'] : null;
        $this->container['po_number'] = isset($data['po_number']) ? $data['po_number'] : null;
        $this->container['knowledge_base_category_id'] = isset($data['knowledge_base_category_id']) ? $data['knowledge_base_category_id'] : null;
        $this->container['knowledge_base_sub_category_id'] = isset($data['knowledge_base_sub_category_id']) ? $data['knowledge_base_sub_category_id'] : null;
        $this->container['allow_all_clients_portal_view'] = isset($data['allow_all_clients_portal_view']) ? $data['allow_all_clients_portal_view'] : null;
        $this->container['customer_updated_flag'] = isset($data['customer_updated_flag']) ? $data['customer_updated_flag'] : null;
        $this->container['automatic_email_contact_flag'] = isset($data['automatic_email_contact_flag']) ? $data['automatic_email_contact_flag'] : null;
        $this->container['automatic_email_resource_flag'] = isset($data['automatic_email_resource_flag']) ? $data['automatic_email_resource_flag'] : null;
        $this->container['automatic_email_cc_flag'] = isset($data['automatic_email_cc_flag']) ? $data['automatic_email_cc_flag'] : null;
        $this->container['automatic_email_cc'] = isset($data['automatic_email_cc']) ? $data['automatic_email_cc'] : null;
        $this->container['initial_description'] = isset($data['initial_description']) ? $data['initial_description'] : null;
        $this->container['initial_internal_analysis'] = isset($data['initial_internal_analysis']) ? $data['initial_internal_analysis'] : null;
        $this->container['initial_resolution'] = isset($data['initial_resolution']) ? $data['initial_resolution'] : null;
        $this->container['contact_email_lookup'] = isset($data['contact_email_lookup']) ? $data['contact_email_lookup'] : null;
        $this->container['process_notifications'] = isset($data['process_notifications']) ? $data['process_notifications'] : null;
        $this->container['skip_callback'] = isset($data['skip_callback']) ? $data['skip_callback'] : null;
        $this->container['closed_date'] = isset($data['closed_date']) ? $data['closed_date'] : null;
        $this->container['closed_by'] = isset($data['closed_by']) ? $data['closed_by'] : null;
        $this->container['closed_flag'] = isset($data['closed_flag']) ? $data['closed_flag'] : null;
        $this->container['date_entered'] = isset($data['date_entered']) ? $data['date_entered'] : null;
        $this->container['entered_by'] = isset($data['entered_by']) ? $data['entered_by'] : null;
        $this->container['actual_hours'] = isset($data['actual_hours']) ? $data['actual_hours'] : null;
        $this->container['approved'] = isset($data['approved']) ? $data['approved'] : null;
        $this->container['sub_billing_method'] = isset($data['sub_billing_method']) ? $data['sub_billing_method'] : null;
        $this->container['sub_billing_amount'] = isset($data['sub_billing_amount']) ? $data['sub_billing_amount'] : null;
        $this->container['sub_date_accepted'] = isset($data['sub_date_accepted']) ? $data['sub_date_accepted'] : null;
        $this->container['date_resolved'] = isset($data['date_resolved']) ? $data['date_resolved'] : null;
        $this->container['date_resplan'] = isset($data['date_resplan']) ? $data['date_resplan'] : null;
        $this->container['date_responded'] = isset($data['date_responded']) ? $data['date_responded'] : null;
        $this->container['resolve_minutes'] = isset($data['resolve_minutes']) ? $data['resolve_minutes'] : null;
        $this->container['res_plan_minutes'] = isset($data['res_plan_minutes']) ? $data['res_plan_minutes'] : null;
        $this->container['respond_minutes'] = isset($data['respond_minutes']) ? $data['respond_minutes'] : null;
        $this->container['is_in_sla'] = isset($data['is_in_sla']) ? $data['is_in_sla'] : null;
        $this->container['knowledge_base_link_id'] = isset($data['knowledge_base_link_id']) ? $data['knowledge_base_link_id'] : null;
        $this->container['resources'] = isset($data['resources']) ? $data['resources'] : null;
        $this->container['parent_ticket_id'] = isset($data['parent_ticket_id']) ? $data['parent_ticket_id'] : null;
        $this->container['has_child_ticket'] = isset($data['has_child_ticket']) ? $data['has_child_ticket'] : null;
        $this->container['knowledge_base_link_type'] = isset($data['knowledge_base_link_type']) ? $data['knowledge_base_link_type'] : null;
        $this->container['bill_time'] = isset($data['bill_time']) ? $data['bill_time'] : null;
        $this->container['bill_expenses'] = isset($data['bill_expenses']) ? $data['bill_expenses'] : null;
        $this->container['bill_products'] = isset($data['bill_products']) ? $data['bill_products'] : null;
        $this->container['predecessor_type'] = isset($data['predecessor_type']) ? $data['predecessor_type'] : null;
        $this->container['predecessor_id'] = isset($data['predecessor_id']) ? $data['predecessor_id'] : null;
        $this->container['predecessor_closed_flag'] = isset($data['predecessor_closed_flag']) ? $data['predecessor_closed_flag'] : null;
        $this->container['lag_days'] = isset($data['lag_days']) ? $data['lag_days'] : null;
        $this->container['lag_nonworking_days_flag'] = isset($data['lag_nonworking_days_flag']) ? $data['lag_nonworking_days_flag'] : null;
        $this->container['estimated_start_date'] = isset($data['estimated_start_date']) ? $data['estimated_start_date'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['location_id'] = isset($data['location_id']) ? $data['location_id'] : null;
        $this->container['business_unit_id'] = isset($data['business_unit_id']) ? $data['business_unit_id'] : null;
        $this->container['mobile_guid'] = isset($data['mobile_guid']) ? $data['mobile_guid'] : null;
        $this->container['sla'] = isset($data['sla']) ? $data['sla'] : null;
        $this->container['_info'] = isset($data['_info']) ? $data['_info'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['summary'] === null) {
            $invalid_properties[] = "'summary' can't be null";
        }
        if ((strlen($this->container['summary']) > 100)) {
            $invalid_properties[] = "invalid value for 'summary', the character length must be smaller than or equal to 100.";
        }

        $allowed_values = ["ServiceTicket", "ProjectTicket", "ProjectIssue"];
        if (!in_array($this->container['record_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'record_type', must be one of #{allowed_values}.";
        }

        if (!is_null($this->container['wbs_code']) && (strlen($this->container['wbs_code']) > 50)) {
            $invalid_properties[] = "invalid value for 'wbs_code', the character length must be smaller than or equal to 50.";
        }

        if ($this->container['company'] === null) {
            $invalid_properties[] = "'company' can't be null";
        }
        if (!is_null($this->container['site_name']) && (strlen($this->container['site_name']) > 50)) {
            $invalid_properties[] = "invalid value for 'site_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['address_line1']) && (strlen($this->container['address_line1']) > 50)) {
            $invalid_properties[] = "invalid value for 'address_line1', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['address_line2']) && (strlen($this->container['address_line2']) > 50)) {
            $invalid_properties[] = "invalid value for 'address_line2', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['city']) && (strlen($this->container['city']) > 50)) {
            $invalid_properties[] = "invalid value for 'city', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['state_identifier']) && (strlen($this->container['state_identifier']) > 50)) {
            $invalid_properties[] = "invalid value for 'state_identifier', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['zip']) && (strlen($this->container['zip']) > 12)) {
            $invalid_properties[] = "invalid value for 'zip', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['contact_name']) && (strlen($this->container['contact_name']) > 62)) {
            $invalid_properties[] = "invalid value for 'contact_name', the character length must be smaller than or equal to 62.";
        }

        if (!is_null($this->container['contact_phone_number']) && (strlen($this->container['contact_phone_number']) > 20)) {
            $invalid_properties[] = "invalid value for 'contact_phone_number', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['contact_phone_extension']) && (strlen($this->container['contact_phone_extension']) > 15)) {
            $invalid_properties[] = "invalid value for 'contact_phone_extension', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['contact_email_address']) && (strlen($this->container['contact_email_address']) > 250)) {
            $invalid_properties[] = "invalid value for 'contact_email_address', the character length must be smaller than or equal to 250.";
        }

        $allowed_values = ["Low", "Medium", "High"];
        if (!in_array($this->container['severity'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'severity', must be one of #{allowed_values}.";
        }

        $allowed_values = ["Low", "Medium", "High"];
        if (!in_array($this->container['impact'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'impact', must be one of #{allowed_values}.";
        }

        if (!is_null($this->container['external_x_ref']) && (strlen($this->container['external_x_ref']) > 100)) {
            $invalid_properties[] = "invalid value for 'external_x_ref', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['po_number']) && (strlen($this->container['po_number']) > 50)) {
            $invalid_properties[] = "invalid value for 'po_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['automatic_email_cc']) && (strlen($this->container['automatic_email_cc']) > 1000)) {
            $invalid_properties[] = "invalid value for 'automatic_email_cc', the character length must be smaller than or equal to 1000.";
        }

        $allowed_values = ["ActualRates", "FixedFee", "NotToExceed", "OverrideRate"];
        if (!in_array($this->container['sub_billing_method'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'sub_billing_method', must be one of #{allowed_values}.";
        }

        $allowed_values = ["ServiceTicket", "ProjectTicket", "ProjectIssue", "KnowledgeBaseArticle", "Time", "Activity"];
        if (!in_array($this->container['knowledge_base_link_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'knowledge_base_link_type', must be one of #{allowed_values}.";
        }

        $allowed_values = ["Billable", "DoNotBill", "NoCharge", "NoDefault"];
        if (!in_array($this->container['bill_time'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'bill_time', must be one of #{allowed_values}.";
        }

        $allowed_values = ["Billable", "DoNotBill", "NoCharge", "NoDefault"];
        if (!in_array($this->container['bill_expenses'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'bill_expenses', must be one of #{allowed_values}.";
        }

        $allowed_values = ["Billable", "DoNotBill", "NoCharge", "NoDefault"];
        if (!in_array($this->container['bill_products'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'bill_products', must be one of #{allowed_values}.";
        }

        $allowed_values = ["Ticket", "Phase"];
        if (!in_array($this->container['predecessor_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'predecessor_type', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['summary'] === null) {
            return false;
        }
        if (strlen($this->container['summary']) > 100) {
            return false;
        }
        $allowed_values = ["ServiceTicket", "ProjectTicket", "ProjectIssue"];
        if (!in_array($this->container['record_type'], $allowed_values)) {
            return false;
        }
        if (strlen($this->container['wbs_code']) > 50) {
            return false;
        }
        if ($this->container['company'] === null) {
            return false;
        }
        if (strlen($this->container['site_name']) > 50) {
            return false;
        }
        if (strlen($this->container['address_line1']) > 50) {
            return false;
        }
        if (strlen($this->container['address_line2']) > 50) {
            return false;
        }
        if (strlen($this->container['city']) > 50) {
            return false;
        }
        if (strlen($this->container['state_identifier']) > 50) {
            return false;
        }
        if (strlen($this->container['zip']) > 12) {
            return false;
        }
        if (strlen($this->container['contact_name']) > 62) {
            return false;
        }
        if (strlen($this->container['contact_phone_number']) > 20) {
            return false;
        }
        if (strlen($this->container['contact_phone_extension']) > 15) {
            return false;
        }
        if (strlen($this->container['contact_email_address']) > 250) {
            return false;
        }
        $allowed_values = ["Low", "Medium", "High"];
        if (!in_array($this->container['severity'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["Low", "Medium", "High"];
        if (!in_array($this->container['impact'], $allowed_values)) {
            return false;
        }
        if (strlen($this->container['external_x_ref']) > 100) {
            return false;
        }
        if (strlen($this->container['po_number']) > 50) {
            return false;
        }
        if (strlen($this->container['automatic_email_cc']) > 1000) {
            return false;
        }
        $allowed_values = ["ActualRates", "FixedFee", "NotToExceed", "OverrideRate"];
        if (!in_array($this->container['sub_billing_method'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["ServiceTicket", "ProjectTicket", "ProjectIssue", "KnowledgeBaseArticle", "Time", "Activity"];
        if (!in_array($this->container['knowledge_base_link_type'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["Billable", "DoNotBill", "NoCharge", "NoDefault"];
        if (!in_array($this->container['bill_time'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["Billable", "DoNotBill", "NoCharge", "NoDefault"];
        if (!in_array($this->container['bill_expenses'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["Billable", "DoNotBill", "NoCharge", "NoDefault"];
        if (!in_array($this->container['bill_products'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["Ticket", "Phase"];
        if (!in_array($this->container['predecessor_type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets summary
     * @return string
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     * @param string $summary
     * @return $this
     */
    public function setSummary($summary)
    {
        if ((strlen($summary) > 100)) {
            throw new \InvalidArgumentException('invalid length for $summary when calling Ticket., must be smaller than or equal to 100.');
        }

        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets record_type
     * @return string
     */
    public function getRecordType()
    {
        return $this->container['record_type'];
    }

    /**
     * Sets record_type
     * @param string $record_type
     * @return $this
     */
    public function setRecordType($record_type)
    {
        $allowed_values = array('ServiceTicket', 'ProjectTicket', 'ProjectIssue');
        if (!is_null($record_type) && (!in_array($record_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'record_type', must be one of 'ServiceTicket', 'ProjectTicket', 'ProjectIssue'");
        }
        $this->container['record_type'] = $record_type;

        return $this;
    }

    /**
     * Gets board
     * @return \Spinen\ConnectWise\Clients\Sales\Model\BoardReference
     */
    public function getBoard()
    {
        return $this->container['board'];
    }

    /**
     * Sets board
     * @param \Spinen\ConnectWise\Clients\Sales\Model\BoardReference $board
     * @return $this
     */
    public function setBoard($board)
    {
        $this->container['board'] = $board;

        return $this;
    }

    /**
     * Gets status
     * @return \Spinen\ConnectWise\Clients\Sales\Model\ServiceStatusReference
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param \Spinen\ConnectWise\Clients\Sales\Model\ServiceStatusReference $status
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets project
     * @return \Spinen\ConnectWise\Clients\Sales\Model\ProjectReference
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     * @param \Spinen\ConnectWise\Clients\Sales\Model\ProjectReference $project
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets phase
     * @return \Spinen\ConnectWise\Clients\Sales\Model\ProjectPhaseReference
     */
    public function getPhase()
    {
        return $this->container['phase'];
    }

    /**
     * Sets phase
     * @param \Spinen\ConnectWise\Clients\Sales\Model\ProjectPhaseReference $phase
     * @return $this
     */
    public function setPhase($phase)
    {
        $this->container['phase'] = $phase;

        return $this;
    }

    /**
     * Gets wbs_code
     * @return string
     */
    public function getWbsCode()
    {
        return $this->container['wbs_code'];
    }

    /**
     * Sets wbs_code
     * @param string $wbs_code
     * @return $this
     */
    public function setWbsCode($wbs_code)
    {
        if (!is_null($wbs_code) && (strlen($wbs_code) > 50)) {
            throw new \InvalidArgumentException('invalid length for $wbs_code when calling Ticket., must be smaller than or equal to 50.');
        }

        $this->container['wbs_code'] = $wbs_code;

        return $this;
    }

    /**
     * Gets company
     * @return \Spinen\ConnectWise\Clients\Sales\Model\CompanyReference
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     * @param \Spinen\ConnectWise\Clients\Sales\Model\CompanyReference $company
     * @return $this
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets site
     * @return \Spinen\ConnectWise\Clients\Sales\Model\SiteReference
     */
    public function getSite()
    {
        return $this->container['site'];
    }

    /**
     * Sets site
     * @param \Spinen\ConnectWise\Clients\Sales\Model\SiteReference $site
     * @return $this
     */
    public function setSite($site)
    {
        $this->container['site'] = $site;

        return $this;
    }

    /**
     * Gets site_name
     * @return string
     */
    public function getSiteName()
    {
        return $this->container['site_name'];
    }

    /**
     * Sets site_name
     * @param string $site_name
     * @return $this
     */
    public function setSiteName($site_name)
    {
        if (!is_null($site_name) && (strlen($site_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $site_name when calling Ticket., must be smaller than or equal to 50.');
        }

        $this->container['site_name'] = $site_name;

        return $this;
    }

    /**
     * Gets address_line1
     * @return string
     */
    public function getAddressLine1()
    {
        return $this->container['address_line1'];
    }

    /**
     * Sets address_line1
     * @param string $address_line1
     * @return $this
     */
    public function setAddressLine1($address_line1)
    {
        if (!is_null($address_line1) && (strlen($address_line1) > 50)) {
            throw new \InvalidArgumentException('invalid length for $address_line1 when calling Ticket., must be smaller than or equal to 50.');
        }

        $this->container['address_line1'] = $address_line1;

        return $this;
    }

    /**
     * Gets address_line2
     * @return string
     */
    public function getAddressLine2()
    {
        return $this->container['address_line2'];
    }

    /**
     * Sets address_line2
     * @param string $address_line2
     * @return $this
     */
    public function setAddressLine2($address_line2)
    {
        if (!is_null($address_line2) && (strlen($address_line2) > 50)) {
            throw new \InvalidArgumentException('invalid length for $address_line2 when calling Ticket., must be smaller than or equal to 50.');
        }

        $this->container['address_line2'] = $address_line2;

        return $this;
    }

    /**
     * Gets city
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     * @param string $city
     * @return $this
     */
    public function setCity($city)
    {
        if (!is_null($city) && (strlen($city) > 50)) {
            throw new \InvalidArgumentException('invalid length for $city when calling Ticket., must be smaller than or equal to 50.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state_identifier
     * @return string
     */
    public function getStateIdentifier()
    {
        return $this->container['state_identifier'];
    }

    /**
     * Sets state_identifier
     * @param string $state_identifier
     * @return $this
     */
    public function setStateIdentifier($state_identifier)
    {
        if (!is_null($state_identifier) && (strlen($state_identifier) > 50)) {
            throw new \InvalidArgumentException('invalid length for $state_identifier when calling Ticket., must be smaller than or equal to 50.');
        }

        $this->container['state_identifier'] = $state_identifier;

        return $this;
    }

    /**
     * Gets zip
     * @return string
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     * @param string $zip
     * @return $this
     */
    public function setZip($zip)
    {
        if (!is_null($zip) && (strlen($zip) > 12)) {
            throw new \InvalidArgumentException('invalid length for $zip when calling Ticket., must be smaller than or equal to 12.');
        }

        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets country
     * @return \Spinen\ConnectWise\Clients\Sales\Model\CountryReference
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     * @param \Spinen\ConnectWise\Clients\Sales\Model\CountryReference $country
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets contact
     * @return \Spinen\ConnectWise\Clients\Sales\Model\ContactReference
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     * @param \Spinen\ConnectWise\Clients\Sales\Model\ContactReference $contact
     * @return $this
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets contact_name
     * @return string
     */
    public function getContactName()
    {
        return $this->container['contact_name'];
    }

    /**
     * Sets contact_name
     * @param string $contact_name
     * @return $this
     */
    public function setContactName($contact_name)
    {
        if (!is_null($contact_name) && (strlen($contact_name) > 62)) {
            throw new \InvalidArgumentException('invalid length for $contact_name when calling Ticket., must be smaller than or equal to 62.');
        }

        $this->container['contact_name'] = $contact_name;

        return $this;
    }

    /**
     * Gets contact_phone_number
     * @return string
     */
    public function getContactPhoneNumber()
    {
        return $this->container['contact_phone_number'];
    }

    /**
     * Sets contact_phone_number
     * @param string $contact_phone_number
     * @return $this
     */
    public function setContactPhoneNumber($contact_phone_number)
    {
        if (!is_null($contact_phone_number) && (strlen($contact_phone_number) > 20)) {
            throw new \InvalidArgumentException('invalid length for $contact_phone_number when calling Ticket., must be smaller than or equal to 20.');
        }

        $this->container['contact_phone_number'] = $contact_phone_number;

        return $this;
    }

    /**
     * Gets contact_phone_extension
     * @return string
     */
    public function getContactPhoneExtension()
    {
        return $this->container['contact_phone_extension'];
    }

    /**
     * Sets contact_phone_extension
     * @param string $contact_phone_extension
     * @return $this
     */
    public function setContactPhoneExtension($contact_phone_extension)
    {
        if (!is_null($contact_phone_extension) && (strlen($contact_phone_extension) > 15)) {
            throw new \InvalidArgumentException('invalid length for $contact_phone_extension when calling Ticket., must be smaller than or equal to 15.');
        }

        $this->container['contact_phone_extension'] = $contact_phone_extension;

        return $this;
    }

    /**
     * Gets contact_email_address
     * @return string
     */
    public function getContactEmailAddress()
    {
        return $this->container['contact_email_address'];
    }

    /**
     * Sets contact_email_address
     * @param string $contact_email_address
     * @return $this
     */
    public function setContactEmailAddress($contact_email_address)
    {
        if (!is_null($contact_email_address) && (strlen($contact_email_address) > 250)) {
            throw new \InvalidArgumentException('invalid length for $contact_email_address when calling Ticket., must be smaller than or equal to 250.');
        }

        $this->container['contact_email_address'] = $contact_email_address;

        return $this;
    }

    /**
     * Gets type
     * @return \Spinen\ConnectWise\Clients\Sales\Model\ServiceTypeReference
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param \Spinen\ConnectWise\Clients\Sales\Model\ServiceTypeReference $type
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets sub_type
     * @return \Spinen\ConnectWise\Clients\Sales\Model\ServiceSubTypeReference
     */
    public function getSubType()
    {
        return $this->container['sub_type'];
    }

    /**
     * Sets sub_type
     * @param \Spinen\ConnectWise\Clients\Sales\Model\ServiceSubTypeReference $sub_type
     * @return $this
     */
    public function setSubType($sub_type)
    {
        $this->container['sub_type'] = $sub_type;

        return $this;
    }

    /**
     * Gets item
     * @return \Spinen\ConnectWise\Clients\Sales\Model\ServiceItemReference
     */
    public function getItem()
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     * @param \Spinen\ConnectWise\Clients\Sales\Model\ServiceItemReference $item
     * @return $this
     */
    public function setItem($item)
    {
        $this->container['item'] = $item;

        return $this;
    }

    /**
     * Gets team
     * @return \Spinen\ConnectWise\Clients\Sales\Model\ServiceTeamReference
     */
    public function getTeam()
    {
        return $this->container['team'];
    }

    /**
     * Sets team
     * @param \Spinen\ConnectWise\Clients\Sales\Model\ServiceTeamReference $team
     * @return $this
     */
    public function setTeam($team)
    {
        $this->container['team'] = $team;

        return $this;
    }

    /**
     * Gets owner
     * @return \Spinen\ConnectWise\Clients\Sales\Model\MemberReference
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     * @param \Spinen\ConnectWise\Clients\Sales\Model\MemberReference $owner
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets priority
     * @return \Spinen\ConnectWise\Clients\Sales\Model\PriorityReference
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     * @param \Spinen\ConnectWise\Clients\Sales\Model\PriorityReference $priority
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets service_location
     * @return \Spinen\ConnectWise\Clients\Sales\Model\ServiceLocationReference
     */
    public function getServiceLocation()
    {
        return $this->container['service_location'];
    }

    /**
     * Sets service_location
     * @param \Spinen\ConnectWise\Clients\Sales\Model\ServiceLocationReference $service_location
     * @return $this
     */
    public function setServiceLocation($service_location)
    {
        $this->container['service_location'] = $service_location;

        return $this;
    }

    /**
     * Gets source
     * @return \Spinen\ConnectWise\Clients\Sales\Model\ServiceSourceReference
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     * @param \Spinen\ConnectWise\Clients\Sales\Model\ServiceSourceReference $source
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets required_date
     * @return \DateTime
     */
    public function getRequiredDate()
    {
        return $this->container['required_date'];
    }

    /**
     * Sets required_date
     * @param \DateTime $required_date
     * @return $this
     */
    public function setRequiredDate($required_date)
    {
        $this->container['required_date'] = $required_date;

        return $this;
    }

    /**
     * Gets budget_hours
     * @return double
     */
    public function getBudgetHours()
    {
        return $this->container['budget_hours'];
    }

    /**
     * Sets budget_hours
     * @param double $budget_hours
     * @return $this
     */
    public function setBudgetHours($budget_hours)
    {
        $this->container['budget_hours'] = $budget_hours;

        return $this;
    }

    /**
     * Gets opportunity
     * @return \Spinen\ConnectWise\Clients\Sales\Model\OpportunityReference
     */
    public function getOpportunity()
    {
        return $this->container['opportunity'];
    }

    /**
     * Sets opportunity
     * @param \Spinen\ConnectWise\Clients\Sales\Model\OpportunityReference $opportunity
     * @return $this
     */
    public function setOpportunity($opportunity)
    {
        $this->container['opportunity'] = $opportunity;

        return $this;
    }

    /**
     * Gets agreement
     * @return \Spinen\ConnectWise\Clients\Sales\Model\AgreementReference
     */
    public function getAgreement()
    {
        return $this->container['agreement'];
    }

    /**
     * Sets agreement
     * @param \Spinen\ConnectWise\Clients\Sales\Model\AgreementReference $agreement
     * @return $this
     */
    public function setAgreement($agreement)
    {
        $this->container['agreement'] = $agreement;

        return $this;
    }

    /**
     * Gets severity
     * @return string
     */
    public function getSeverity()
    {
        return $this->container['severity'];
    }

    /**
     * Sets severity
     * @param string $severity
     * @return $this
     */
    public function setSeverity($severity)
    {
        $allowed_values = array('Low', 'Medium', 'High');
        if (!is_null($severity) && (!in_array($severity, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'severity', must be one of 'Low', 'Medium', 'High'");
        }
        $this->container['severity'] = $severity;

        return $this;
    }

    /**
     * Gets impact
     * @return string
     */
    public function getImpact()
    {
        return $this->container['impact'];
    }

    /**
     * Sets impact
     * @param string $impact
     * @return $this
     */
    public function setImpact($impact)
    {
        $allowed_values = array('Low', 'Medium', 'High');
        if (!is_null($impact) && (!in_array($impact, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'impact', must be one of 'Low', 'Medium', 'High'");
        }
        $this->container['impact'] = $impact;

        return $this;
    }

    /**
     * Gets external_x_ref
     * @return string
     */
    public function getExternalXRef()
    {
        return $this->container['external_x_ref'];
    }

    /**
     * Sets external_x_ref
     * @param string $external_x_ref
     * @return $this
     */
    public function setExternalXRef($external_x_ref)
    {
        if (!is_null($external_x_ref) && (strlen($external_x_ref) > 100)) {
            throw new \InvalidArgumentException('invalid length for $external_x_ref when calling Ticket., must be smaller than or equal to 100.');
        }

        $this->container['external_x_ref'] = $external_x_ref;

        return $this;
    }

    /**
     * Gets po_number
     * @return string
     */
    public function getPoNumber()
    {
        return $this->container['po_number'];
    }

    /**
     * Sets po_number
     * @param string $po_number
     * @return $this
     */
    public function setPoNumber($po_number)
    {
        if (!is_null($po_number) && (strlen($po_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $po_number when calling Ticket., must be smaller than or equal to 50.');
        }

        $this->container['po_number'] = $po_number;

        return $this;
    }

    /**
     * Gets knowledge_base_category_id
     * @return int
     */
    public function getKnowledgeBaseCategoryId()
    {
        return $this->container['knowledge_base_category_id'];
    }

    /**
     * Sets knowledge_base_category_id
     * @param int $knowledge_base_category_id
     * @return $this
     */
    public function setKnowledgeBaseCategoryId($knowledge_base_category_id)
    {
        $this->container['knowledge_base_category_id'] = $knowledge_base_category_id;

        return $this;
    }

    /**
     * Gets knowledge_base_sub_category_id
     * @return int
     */
    public function getKnowledgeBaseSubCategoryId()
    {
        return $this->container['knowledge_base_sub_category_id'];
    }

    /**
     * Sets knowledge_base_sub_category_id
     * @param int $knowledge_base_sub_category_id
     * @return $this
     */
    public function setKnowledgeBaseSubCategoryId($knowledge_base_sub_category_id)
    {
        $this->container['knowledge_base_sub_category_id'] = $knowledge_base_sub_category_id;

        return $this;
    }

    /**
     * Gets allow_all_clients_portal_view
     * @return bool
     */
    public function getAllowAllClientsPortalView()
    {
        return $this->container['allow_all_clients_portal_view'];
    }

    /**
     * Sets allow_all_clients_portal_view
     * @param bool $allow_all_clients_portal_view
     * @return $this
     */
    public function setAllowAllClientsPortalView($allow_all_clients_portal_view)
    {
        $this->container['allow_all_clients_portal_view'] = $allow_all_clients_portal_view;

        return $this;
    }

    /**
     * Gets customer_updated_flag
     * @return bool
     */
    public function getCustomerUpdatedFlag()
    {
        return $this->container['customer_updated_flag'];
    }

    /**
     * Sets customer_updated_flag
     * @param bool $customer_updated_flag
     * @return $this
     */
    public function setCustomerUpdatedFlag($customer_updated_flag)
    {
        $this->container['customer_updated_flag'] = $customer_updated_flag;

        return $this;
    }

    /**
     * Gets automatic_email_contact_flag
     * @return bool
     */
    public function getAutomaticEmailContactFlag()
    {
        return $this->container['automatic_email_contact_flag'];
    }

    /**
     * Sets automatic_email_contact_flag
     * @param bool $automatic_email_contact_flag
     * @return $this
     */
    public function setAutomaticEmailContactFlag($automatic_email_contact_flag)
    {
        $this->container['automatic_email_contact_flag'] = $automatic_email_contact_flag;

        return $this;
    }

    /**
     * Gets automatic_email_resource_flag
     * @return bool
     */
    public function getAutomaticEmailResourceFlag()
    {
        return $this->container['automatic_email_resource_flag'];
    }

    /**
     * Sets automatic_email_resource_flag
     * @param bool $automatic_email_resource_flag
     * @return $this
     */
    public function setAutomaticEmailResourceFlag($automatic_email_resource_flag)
    {
        $this->container['automatic_email_resource_flag'] = $automatic_email_resource_flag;

        return $this;
    }

    /**
     * Gets automatic_email_cc_flag
     * @return bool
     */
    public function getAutomaticEmailCcFlag()
    {
        return $this->container['automatic_email_cc_flag'];
    }

    /**
     * Sets automatic_email_cc_flag
     * @param bool $automatic_email_cc_flag
     * @return $this
     */
    public function setAutomaticEmailCcFlag($automatic_email_cc_flag)
    {
        $this->container['automatic_email_cc_flag'] = $automatic_email_cc_flag;

        return $this;
    }

    /**
     * Gets automatic_email_cc
     * @return string
     */
    public function getAutomaticEmailCc()
    {
        return $this->container['automatic_email_cc'];
    }

    /**
     * Sets automatic_email_cc
     * @param string $automatic_email_cc
     * @return $this
     */
    public function setAutomaticEmailCc($automatic_email_cc)
    {
        if (!is_null($automatic_email_cc) && (strlen($automatic_email_cc) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $automatic_email_cc when calling Ticket., must be smaller than or equal to 1000.');
        }

        $this->container['automatic_email_cc'] = $automatic_email_cc;

        return $this;
    }

    /**
     * Gets initial_description
     * @return string
     */
    public function getInitialDescription()
    {
        return $this->container['initial_description'];
    }

    /**
     * Sets initial_description
     * @param string $initial_description Only available for POST, will not be returned in the response
     * @return $this
     */
    public function setInitialDescription($initial_description)
    {
        $this->container['initial_description'] = $initial_description;

        return $this;
    }

    /**
     * Gets initial_internal_analysis
     * @return string
     */
    public function getInitialInternalAnalysis()
    {
        return $this->container['initial_internal_analysis'];
    }

    /**
     * Sets initial_internal_analysis
     * @param string $initial_internal_analysis Only available for POST, will not be returned in the response
     * @return $this
     */
    public function setInitialInternalAnalysis($initial_internal_analysis)
    {
        $this->container['initial_internal_analysis'] = $initial_internal_analysis;

        return $this;
    }

    /**
     * Gets initial_resolution
     * @return string
     */
    public function getInitialResolution()
    {
        return $this->container['initial_resolution'];
    }

    /**
     * Sets initial_resolution
     * @param string $initial_resolution Only available for POST, will not be returned in the response
     * @return $this
     */
    public function setInitialResolution($initial_resolution)
    {
        $this->container['initial_resolution'] = $initial_resolution;

        return $this;
    }

    /**
     * Gets contact_email_lookup
     * @return string
     */
    public function getContactEmailLookup()
    {
        return $this->container['contact_email_lookup'];
    }

    /**
     * Sets contact_email_lookup
     * @param string $contact_email_lookup
     * @return $this
     */
    public function setContactEmailLookup($contact_email_lookup)
    {
        $this->container['contact_email_lookup'] = $contact_email_lookup;

        return $this;
    }

    /**
     * Gets process_notifications
     * @return bool
     */
    public function getProcessNotifications()
    {
        return $this->container['process_notifications'];
    }

    /**
     * Sets process_notifications
     * @param bool $process_notifications Can be set to false to skip notification processing when adding or updating a ticket (Defaults to True)
     * @return $this
     */
    public function setProcessNotifications($process_notifications)
    {
        $this->container['process_notifications'] = $process_notifications;

        return $this;
    }

    /**
     * Gets skip_callback
     * @return bool
     */
    public function getSkipCallback()
    {
        return $this->container['skip_callback'];
    }

    /**
     * Sets skip_callback
     * @param bool $skip_callback
     * @return $this
     */
    public function setSkipCallback($skip_callback)
    {
        $this->container['skip_callback'] = $skip_callback;

        return $this;
    }

    /**
     * Gets closed_date
     * @return string
     */
    public function getClosedDate()
    {
        return $this->container['closed_date'];
    }

    /**
     * Sets closed_date
     * @param string $closed_date
     * @return $this
     */
    public function setClosedDate($closed_date)
    {
        $this->container['closed_date'] = $closed_date;

        return $this;
    }

    /**
     * Gets closed_by
     * @return string
     */
    public function getClosedBy()
    {
        return $this->container['closed_by'];
    }

    /**
     * Sets closed_by
     * @param string $closed_by
     * @return $this
     */
    public function setClosedBy($closed_by)
    {
        $this->container['closed_by'] = $closed_by;

        return $this;
    }

    /**
     * Gets closed_flag
     * @return bool
     */
    public function getClosedFlag()
    {
        return $this->container['closed_flag'];
    }

    /**
     * Sets closed_flag
     * @param bool $closed_flag
     * @return $this
     */
    public function setClosedFlag($closed_flag)
    {
        $this->container['closed_flag'] = $closed_flag;

        return $this;
    }

    /**
     * Gets date_entered
     * @return string
     */
    public function getDateEntered()
    {
        return $this->container['date_entered'];
    }

    /**
     * Sets date_entered
     * @param string $date_entered
     * @return $this
     */
    public function setDateEntered($date_entered)
    {
        $this->container['date_entered'] = $date_entered;

        return $this;
    }

    /**
     * Gets entered_by
     * @return string
     */
    public function getEnteredBy()
    {
        return $this->container['entered_by'];
    }

    /**
     * Sets entered_by
     * @param string $entered_by
     * @return $this
     */
    public function setEnteredBy($entered_by)
    {
        $this->container['entered_by'] = $entered_by;

        return $this;
    }

    /**
     * Gets actual_hours
     * @return double
     */
    public function getActualHours()
    {
        return $this->container['actual_hours'];
    }

    /**
     * Sets actual_hours
     * @param double $actual_hours
     * @return $this
     */
    public function setActualHours($actual_hours)
    {
        $this->container['actual_hours'] = $actual_hours;

        return $this;
    }

    /**
     * Gets approved
     * @return bool
     */
    public function getApproved()
    {
        return $this->container['approved'];
    }

    /**
     * Sets approved
     * @param bool $approved
     * @return $this
     */
    public function setApproved($approved)
    {
        $this->container['approved'] = $approved;

        return $this;
    }

    /**
     * Gets sub_billing_method
     * @return string
     */
    public function getSubBillingMethod()
    {
        return $this->container['sub_billing_method'];
    }

    /**
     * Sets sub_billing_method
     * @param string $sub_billing_method
     * @return $this
     */
    public function setSubBillingMethod($sub_billing_method)
    {
        $allowed_values = array('ActualRates', 'FixedFee', 'NotToExceed', 'OverrideRate');
        if (!is_null($sub_billing_method) && (!in_array($sub_billing_method, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'sub_billing_method', must be one of 'ActualRates', 'FixedFee', 'NotToExceed', 'OverrideRate'");
        }
        $this->container['sub_billing_method'] = $sub_billing_method;

        return $this;
    }

    /**
     * Gets sub_billing_amount
     * @return double
     */
    public function getSubBillingAmount()
    {
        return $this->container['sub_billing_amount'];
    }

    /**
     * Sets sub_billing_amount
     * @param double $sub_billing_amount
     * @return $this
     */
    public function setSubBillingAmount($sub_billing_amount)
    {
        $this->container['sub_billing_amount'] = $sub_billing_amount;

        return $this;
    }

    /**
     * Gets sub_date_accepted
     * @return string
     */
    public function getSubDateAccepted()
    {
        return $this->container['sub_date_accepted'];
    }

    /**
     * Sets sub_date_accepted
     * @param string $sub_date_accepted
     * @return $this
     */
    public function setSubDateAccepted($sub_date_accepted)
    {
        $this->container['sub_date_accepted'] = $sub_date_accepted;

        return $this;
    }

    /**
     * Gets date_resolved
     * @return string
     */
    public function getDateResolved()
    {
        return $this->container['date_resolved'];
    }

    /**
     * Sets date_resolved
     * @param string $date_resolved
     * @return $this
     */
    public function setDateResolved($date_resolved)
    {
        $this->container['date_resolved'] = $date_resolved;

        return $this;
    }

    /**
     * Gets date_resplan
     * @return string
     */
    public function getDateResplan()
    {
        return $this->container['date_resplan'];
    }

    /**
     * Sets date_resplan
     * @param string $date_resplan
     * @return $this
     */
    public function setDateResplan($date_resplan)
    {
        $this->container['date_resplan'] = $date_resplan;

        return $this;
    }

    /**
     * Gets date_responded
     * @return string
     */
    public function getDateResponded()
    {
        return $this->container['date_responded'];
    }

    /**
     * Sets date_responded
     * @param string $date_responded
     * @return $this
     */
    public function setDateResponded($date_responded)
    {
        $this->container['date_responded'] = $date_responded;

        return $this;
    }

    /**
     * Gets resolve_minutes
     * @return int
     */
    public function getResolveMinutes()
    {
        return $this->container['resolve_minutes'];
    }

    /**
     * Sets resolve_minutes
     * @param int $resolve_minutes
     * @return $this
     */
    public function setResolveMinutes($resolve_minutes)
    {
        $this->container['resolve_minutes'] = $resolve_minutes;

        return $this;
    }

    /**
     * Gets res_plan_minutes
     * @return int
     */
    public function getResPlanMinutes()
    {
        return $this->container['res_plan_minutes'];
    }

    /**
     * Sets res_plan_minutes
     * @param int $res_plan_minutes
     * @return $this
     */
    public function setResPlanMinutes($res_plan_minutes)
    {
        $this->container['res_plan_minutes'] = $res_plan_minutes;

        return $this;
    }

    /**
     * Gets respond_minutes
     * @return int
     */
    public function getRespondMinutes()
    {
        return $this->container['respond_minutes'];
    }

    /**
     * Sets respond_minutes
     * @param int $respond_minutes
     * @return $this
     */
    public function setRespondMinutes($respond_minutes)
    {
        $this->container['respond_minutes'] = $respond_minutes;

        return $this;
    }

    /**
     * Gets is_in_sla
     * @return bool
     */
    public function getIsInSla()
    {
        return $this->container['is_in_sla'];
    }

    /**
     * Sets is_in_sla
     * @param bool $is_in_sla
     * @return $this
     */
    public function setIsInSla($is_in_sla)
    {
        $this->container['is_in_sla'] = $is_in_sla;

        return $this;
    }

    /**
     * Gets knowledge_base_link_id
     * @return int
     */
    public function getKnowledgeBaseLinkId()
    {
        return $this->container['knowledge_base_link_id'];
    }

    /**
     * Sets knowledge_base_link_id
     * @param int $knowledge_base_link_id
     * @return $this
     */
    public function setKnowledgeBaseLinkId($knowledge_base_link_id)
    {
        $this->container['knowledge_base_link_id'] = $knowledge_base_link_id;

        return $this;
    }

    /**
     * Gets resources
     * @return string
     */
    public function getResources()
    {
        return $this->container['resources'];
    }

    /**
     * Sets resources
     * @param string $resources
     * @return $this
     */
    public function setResources($resources)
    {
        $this->container['resources'] = $resources;

        return $this;
    }

    /**
     * Gets parent_ticket_id
     * @return int
     */
    public function getParentTicketId()
    {
        return $this->container['parent_ticket_id'];
    }

    /**
     * Sets parent_ticket_id
     * @param int $parent_ticket_id
     * @return $this
     */
    public function setParentTicketId($parent_ticket_id)
    {
        $this->container['parent_ticket_id'] = $parent_ticket_id;

        return $this;
    }

    /**
     * Gets has_child_ticket
     * @return bool
     */
    public function getHasChildTicket()
    {
        return $this->container['has_child_ticket'];
    }

    /**
     * Sets has_child_ticket
     * @param bool $has_child_ticket
     * @return $this
     */
    public function setHasChildTicket($has_child_ticket)
    {
        $this->container['has_child_ticket'] = $has_child_ticket;

        return $this;
    }

    /**
     * Gets knowledge_base_link_type
     * @return string
     */
    public function getKnowledgeBaseLinkType()
    {
        return $this->container['knowledge_base_link_type'];
    }

    /**
     * Sets knowledge_base_link_type
     * @param string $knowledge_base_link_type
     * @return $this
     */
    public function setKnowledgeBaseLinkType($knowledge_base_link_type)
    {
        $allowed_values = array('ServiceTicket', 'ProjectTicket', 'ProjectIssue', 'KnowledgeBaseArticle', 'Time', 'Activity');
        if (!is_null($knowledge_base_link_type) && (!in_array($knowledge_base_link_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'knowledge_base_link_type', must be one of 'ServiceTicket', 'ProjectTicket', 'ProjectIssue', 'KnowledgeBaseArticle', 'Time', 'Activity'");
        }
        $this->container['knowledge_base_link_type'] = $knowledge_base_link_type;

        return $this;
    }

    /**
     * Gets bill_time
     * @return string
     */
    public function getBillTime()
    {
        return $this->container['bill_time'];
    }

    /**
     * Sets bill_time
     * @param string $bill_time
     * @return $this
     */
    public function setBillTime($bill_time)
    {
        $allowed_values = array('Billable', 'DoNotBill', 'NoCharge', 'NoDefault');
        if (!is_null($bill_time) && (!in_array($bill_time, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'bill_time', must be one of 'Billable', 'DoNotBill', 'NoCharge', 'NoDefault'");
        }
        $this->container['bill_time'] = $bill_time;

        return $this;
    }

    /**
     * Gets bill_expenses
     * @return string
     */
    public function getBillExpenses()
    {
        return $this->container['bill_expenses'];
    }

    /**
     * Sets bill_expenses
     * @param string $bill_expenses
     * @return $this
     */
    public function setBillExpenses($bill_expenses)
    {
        $allowed_values = array('Billable', 'DoNotBill', 'NoCharge', 'NoDefault');
        if (!is_null($bill_expenses) && (!in_array($bill_expenses, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'bill_expenses', must be one of 'Billable', 'DoNotBill', 'NoCharge', 'NoDefault'");
        }
        $this->container['bill_expenses'] = $bill_expenses;

        return $this;
    }

    /**
     * Gets bill_products
     * @return string
     */
    public function getBillProducts()
    {
        return $this->container['bill_products'];
    }

    /**
     * Sets bill_products
     * @param string $bill_products
     * @return $this
     */
    public function setBillProducts($bill_products)
    {
        $allowed_values = array('Billable', 'DoNotBill', 'NoCharge', 'NoDefault');
        if (!is_null($bill_products) && (!in_array($bill_products, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'bill_products', must be one of 'Billable', 'DoNotBill', 'NoCharge', 'NoDefault'");
        }
        $this->container['bill_products'] = $bill_products;

        return $this;
    }

    /**
     * Gets predecessor_type
     * @return string
     */
    public function getPredecessorType()
    {
        return $this->container['predecessor_type'];
    }

    /**
     * Sets predecessor_type
     * @param string $predecessor_type
     * @return $this
     */
    public function setPredecessorType($predecessor_type)
    {
        $allowed_values = array('Ticket', 'Phase');
        if (!is_null($predecessor_type) && (!in_array($predecessor_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'predecessor_type', must be one of 'Ticket', 'Phase'");
        }
        $this->container['predecessor_type'] = $predecessor_type;

        return $this;
    }

    /**
     * Gets predecessor_id
     * @return int
     */
    public function getPredecessorId()
    {
        return $this->container['predecessor_id'];
    }

    /**
     * Sets predecessor_id
     * @param int $predecessor_id
     * @return $this
     */
    public function setPredecessorId($predecessor_id)
    {
        $this->container['predecessor_id'] = $predecessor_id;

        return $this;
    }

    /**
     * Gets predecessor_closed_flag
     * @return bool
     */
    public function getPredecessorClosedFlag()
    {
        return $this->container['predecessor_closed_flag'];
    }

    /**
     * Sets predecessor_closed_flag
     * @param bool $predecessor_closed_flag
     * @return $this
     */
    public function setPredecessorClosedFlag($predecessor_closed_flag)
    {
        $this->container['predecessor_closed_flag'] = $predecessor_closed_flag;

        return $this;
    }

    /**
     * Gets lag_days
     * @return int
     */
    public function getLagDays()
    {
        return $this->container['lag_days'];
    }

    /**
     * Sets lag_days
     * @param int $lag_days
     * @return $this
     */
    public function setLagDays($lag_days)
    {
        $this->container['lag_days'] = $lag_days;

        return $this;
    }

    /**
     * Gets lag_nonworking_days_flag
     * @return bool
     */
    public function getLagNonworkingDaysFlag()
    {
        return $this->container['lag_nonworking_days_flag'];
    }

    /**
     * Sets lag_nonworking_days_flag
     * @param bool $lag_nonworking_days_flag
     * @return $this
     */
    public function setLagNonworkingDaysFlag($lag_nonworking_days_flag)
    {
        $this->container['lag_nonworking_days_flag'] = $lag_nonworking_days_flag;

        return $this;
    }

    /**
     * Gets estimated_start_date
     * @return \DateTime
     */
    public function getEstimatedStartDate()
    {
        return $this->container['estimated_start_date'];
    }

    /**
     * Sets estimated_start_date
     * @param \DateTime $estimated_start_date
     * @return $this
     */
    public function setEstimatedStartDate($estimated_start_date)
    {
        $this->container['estimated_start_date'] = $estimated_start_date;

        return $this;
    }

    /**
     * Gets duration
     * @return int
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     * @param int $duration
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets location_id
     * @return int
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     * @param int $location_id
     * @return $this
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets business_unit_id
     * @return int
     */
    public function getBusinessUnitId()
    {
        return $this->container['business_unit_id'];
    }

    /**
     * Sets business_unit_id
     * @param int $business_unit_id
     * @return $this
     */
    public function setBusinessUnitId($business_unit_id)
    {
        $this->container['business_unit_id'] = $business_unit_id;

        return $this;
    }

    /**
     * Gets mobile_guid
     * @return \Spinen\ConnectWise\Clients\Sales\Model\Guid
     */
    public function getMobileGuid()
    {
        return $this->container['mobile_guid'];
    }

    /**
     * Sets mobile_guid
     * @param \Spinen\ConnectWise\Clients\Sales\Model\Guid $mobile_guid
     * @return $this
     */
    public function setMobileGuid($mobile_guid)
    {
        $this->container['mobile_guid'] = $mobile_guid;

        return $this;
    }

    /**
     * Gets sla
     * @return \Spinen\ConnectWise\Clients\Sales\Model\SLAReference
     */
    public function getSla()
    {
        return $this->container['sla'];
    }

    /**
     * Sets sla
     * @param \Spinen\ConnectWise\Clients\Sales\Model\SLAReference $sla
     * @return $this
     */
    public function setSla($sla)
    {
        $this->container['sla'] = $sla;

        return $this;
    }

    /**
     * Gets _info
     * @return \Spinen\ConnectWise\Clients\Sales\Model\Metadata
     */
    public function getInfo()
    {
        return $this->container['_info'];
    }

    /**
     * Sets _info
     * @param \Spinen\ConnectWise\Clients\Sales\Model\Metadata $_info Metadata of the entity
     * @return $this
     */
    public function setInfo($_info)
    {
        $this->container['_info'] = $_info;

        return $this;
    }

    /**
     * Gets custom_fields
     * @return \Spinen\ConnectWise\Clients\Sales\Model\CustomFieldValue[]
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     * @param \Spinen\ConnectWise\Clients\Sales\Model\CustomFieldValue[] $custom_fields
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Spinen\ConnectWise\Clients\Sales\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Spinen\ConnectWise\Clients\Sales\ObjectSerializer::sanitizeForSerialization($this));
    }
}


