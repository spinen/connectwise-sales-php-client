<?php
/**
 * Activity
 *
 * PHP version 5
 *
 * @category Class
 * @package  Spinen\ConnectWise\Clients\Sales
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sales API
 *
 * ConnectWise Sales API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: platform@connectwise.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Clients\Sales\Model;

use \ArrayAccess;

/**
 * Activity Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Spinen\ConnectWise\Clients\Sales
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Activity implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Activity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'type' => '\Spinen\ConnectWise\Clients\Sales\Model\ActivityTypeReference',
        'company' => '\Spinen\ConnectWise\Clients\Sales\Model\CompanyReference',
        'contact' => '\Spinen\ConnectWise\Clients\Sales\Model\ContactReference',
        'phone_number' => 'string',
        'email' => 'string',
        'status' => '\Spinen\ConnectWise\Clients\Sales\Model\ActivityStatusReference',
        'opportunity' => '\Spinen\ConnectWise\Clients\Sales\Model\OpportunityReference',
        'ticket' => '\Spinen\ConnectWise\Clients\Sales\Model\TicketReference',
        'agreement' => '\Spinen\ConnectWise\Clients\Sales\Model\AgreementReference',
        'campaign' => '\Spinen\ConnectWise\Clients\Sales\Model\CampaignReference',
        'notes' => 'string',
        'date_start' => '\DateTime',
        'date_end' => '\DateTime',
        'assigned_by' => '\Spinen\ConnectWise\Clients\Sales\Model\MemberReference',
        'assign_to' => '\Spinen\ConnectWise\Clients\Sales\Model\MemberReference',
        'schedule_status' => '\Spinen\ConnectWise\Clients\Sales\Model\ScheduleStatusReference',
        'reminder' => '\Spinen\ConnectWise\Clients\Sales\Model\ReminderReference',
        'where' => '\Spinen\ConnectWise\Clients\Sales\Model\ServiceLocationReference',
        'notify_flag' => 'bool',
        'mobile_guid' => '\Spinen\ConnectWise\Clients\Sales\Model\Guid',
        '_info' => '\Spinen\ConnectWise\Clients\Sales\Model\Metadata',
        'custom_fields' => '\Spinen\ConnectWise\Clients\Sales\Model\CustomFieldValue[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'type' => 'type',
        'company' => 'company',
        'contact' => 'contact',
        'phone_number' => 'phoneNumber',
        'email' => 'email',
        'status' => 'status',
        'opportunity' => 'opportunity',
        'ticket' => 'ticket',
        'agreement' => 'agreement',
        'campaign' => 'campaign',
        'notes' => 'notes',
        'date_start' => 'dateStart',
        'date_end' => 'dateEnd',
        'assigned_by' => 'assignedBy',
        'assign_to' => 'assignTo',
        'schedule_status' => 'scheduleStatus',
        'reminder' => 'reminder',
        'where' => 'where',
        'notify_flag' => 'notifyFlag',
        'mobile_guid' => 'mobileGuid',
        '_info' => '_info',
        'custom_fields' => 'customFields'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'type' => 'setType',
        'company' => 'setCompany',
        'contact' => 'setContact',
        'phone_number' => 'setPhoneNumber',
        'email' => 'setEmail',
        'status' => 'setStatus',
        'opportunity' => 'setOpportunity',
        'ticket' => 'setTicket',
        'agreement' => 'setAgreement',
        'campaign' => 'setCampaign',
        'notes' => 'setNotes',
        'date_start' => 'setDateStart',
        'date_end' => 'setDateEnd',
        'assigned_by' => 'setAssignedBy',
        'assign_to' => 'setAssignTo',
        'schedule_status' => 'setScheduleStatus',
        'reminder' => 'setReminder',
        'where' => 'setWhere',
        'notify_flag' => 'setNotifyFlag',
        'mobile_guid' => 'setMobileGuid',
        '_info' => 'setInfo',
        'custom_fields' => 'setCustomFields'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'type' => 'getType',
        'company' => 'getCompany',
        'contact' => 'getContact',
        'phone_number' => 'getPhoneNumber',
        'email' => 'getEmail',
        'status' => 'getStatus',
        'opportunity' => 'getOpportunity',
        'ticket' => 'getTicket',
        'agreement' => 'getAgreement',
        'campaign' => 'getCampaign',
        'notes' => 'getNotes',
        'date_start' => 'getDateStart',
        'date_end' => 'getDateEnd',
        'assigned_by' => 'getAssignedBy',
        'assign_to' => 'getAssignTo',
        'schedule_status' => 'getScheduleStatus',
        'reminder' => 'getReminder',
        'where' => 'getWhere',
        'notify_flag' => 'getNotifyFlag',
        'mobile_guid' => 'getMobileGuid',
        '_info' => 'getInfo',
        'custom_fields' => 'getCustomFields'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
        $this->container['contact'] = isset($data['contact']) ? $data['contact'] : null;
        $this->container['phone_number'] = isset($data['phone_number']) ? $data['phone_number'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['opportunity'] = isset($data['opportunity']) ? $data['opportunity'] : null;
        $this->container['ticket'] = isset($data['ticket']) ? $data['ticket'] : null;
        $this->container['agreement'] = isset($data['agreement']) ? $data['agreement'] : null;
        $this->container['campaign'] = isset($data['campaign']) ? $data['campaign'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['date_start'] = isset($data['date_start']) ? $data['date_start'] : null;
        $this->container['date_end'] = isset($data['date_end']) ? $data['date_end'] : null;
        $this->container['assigned_by'] = isset($data['assigned_by']) ? $data['assigned_by'] : null;
        $this->container['assign_to'] = isset($data['assign_to']) ? $data['assign_to'] : null;
        $this->container['schedule_status'] = isset($data['schedule_status']) ? $data['schedule_status'] : null;
        $this->container['reminder'] = isset($data['reminder']) ? $data['reminder'] : null;
        $this->container['where'] = isset($data['where']) ? $data['where'] : null;
        $this->container['notify_flag'] = isset($data['notify_flag']) ? $data['notify_flag'] : null;
        $this->container['mobile_guid'] = isset($data['mobile_guid']) ? $data['mobile_guid'] : null;
        $this->container['_info'] = isset($data['_info']) ? $data['_info'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ((strlen($this->container['name']) > 100)) {
            $invalid_properties[] = "invalid value for 'name', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['phone_number']) && (strlen($this->container['phone_number']) > 30)) {
            $invalid_properties[] = "invalid value for 'phone_number', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['email']) && (strlen($this->container['email']) > 250)) {
            $invalid_properties[] = "invalid value for 'email', the character length must be smaller than or equal to 250.";
        }

        if ($this->container['status'] === null) {
            $invalid_properties[] = "'status' can't be null";
        }
        if ($this->container['assign_to'] === null) {
            $invalid_properties[] = "'assign_to' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['name'] === null) {
            return false;
        }
        if (strlen($this->container['name']) > 100) {
            return false;
        }
        if (strlen($this->container['phone_number']) > 30) {
            return false;
        }
        if (strlen($this->container['email']) > 250) {
            return false;
        }
        if ($this->container['status'] === null) {
            return false;
        }
        if ($this->container['assign_to'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        if ((strlen($name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Activity., must be smaller than or equal to 100.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     * @return \Spinen\ConnectWise\Clients\Sales\Model\ActivityTypeReference
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param \Spinen\ConnectWise\Clients\Sales\Model\ActivityTypeReference $type
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets company
     * @return \Spinen\ConnectWise\Clients\Sales\Model\CompanyReference
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     * @param \Spinen\ConnectWise\Clients\Sales\Model\CompanyReference $company
     * @return $this
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets contact
     * @return \Spinen\ConnectWise\Clients\Sales\Model\ContactReference
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     * @param \Spinen\ConnectWise\Clients\Sales\Model\ContactReference $contact
     * @return $this
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets phone_number
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     * @param string $phone_number
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        if (!is_null($phone_number) && (strlen($phone_number) > 30)) {
            throw new \InvalidArgumentException('invalid length for $phone_number when calling Activity., must be smaller than or equal to 30.');
        }

        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     * @param string $email
     * @return $this
     */
    public function setEmail($email)
    {
        if (!is_null($email) && (strlen($email) > 250)) {
            throw new \InvalidArgumentException('invalid length for $email when calling Activity., must be smaller than or equal to 250.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets status
     * @return \Spinen\ConnectWise\Clients\Sales\Model\ActivityStatusReference
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param \Spinen\ConnectWise\Clients\Sales\Model\ActivityStatusReference $status
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets opportunity
     * @return \Spinen\ConnectWise\Clients\Sales\Model\OpportunityReference
     */
    public function getOpportunity()
    {
        return $this->container['opportunity'];
    }

    /**
     * Sets opportunity
     * @param \Spinen\ConnectWise\Clients\Sales\Model\OpportunityReference $opportunity
     * @return $this
     */
    public function setOpportunity($opportunity)
    {
        $this->container['opportunity'] = $opportunity;

        return $this;
    }

    /**
     * Gets ticket
     * @return \Spinen\ConnectWise\Clients\Sales\Model\TicketReference
     */
    public function getTicket()
    {
        return $this->container['ticket'];
    }

    /**
     * Sets ticket
     * @param \Spinen\ConnectWise\Clients\Sales\Model\TicketReference $ticket
     * @return $this
     */
    public function setTicket($ticket)
    {
        $this->container['ticket'] = $ticket;

        return $this;
    }

    /**
     * Gets agreement
     * @return \Spinen\ConnectWise\Clients\Sales\Model\AgreementReference
     */
    public function getAgreement()
    {
        return $this->container['agreement'];
    }

    /**
     * Sets agreement
     * @param \Spinen\ConnectWise\Clients\Sales\Model\AgreementReference $agreement
     * @return $this
     */
    public function setAgreement($agreement)
    {
        $this->container['agreement'] = $agreement;

        return $this;
    }

    /**
     * Gets campaign
     * @return \Spinen\ConnectWise\Clients\Sales\Model\CampaignReference
     */
    public function getCampaign()
    {
        return $this->container['campaign'];
    }

    /**
     * Sets campaign
     * @param \Spinen\ConnectWise\Clients\Sales\Model\CampaignReference $campaign
     * @return $this
     */
    public function setCampaign($campaign)
    {
        $this->container['campaign'] = $campaign;

        return $this;
    }

    /**
     * Gets notes
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     * @param string $notes
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets date_start
     * @return \DateTime
     */
    public function getDateStart()
    {
        return $this->container['date_start'];
    }

    /**
     * Sets date_start
     * @param \DateTime $date_start
     * @return $this
     */
    public function setDateStart($date_start)
    {
        $this->container['date_start'] = $date_start;

        return $this;
    }

    /**
     * Gets date_end
     * @return \DateTime
     */
    public function getDateEnd()
    {
        return $this->container['date_end'];
    }

    /**
     * Sets date_end
     * @param \DateTime $date_end
     * @return $this
     */
    public function setDateEnd($date_end)
    {
        $this->container['date_end'] = $date_end;

        return $this;
    }

    /**
     * Gets assigned_by
     * @return \Spinen\ConnectWise\Clients\Sales\Model\MemberReference
     */
    public function getAssignedBy()
    {
        return $this->container['assigned_by'];
    }

    /**
     * Sets assigned_by
     * @param \Spinen\ConnectWise\Clients\Sales\Model\MemberReference $assigned_by
     * @return $this
     */
    public function setAssignedBy($assigned_by)
    {
        $this->container['assigned_by'] = $assigned_by;

        return $this;
    }

    /**
     * Gets assign_to
     * @return \Spinen\ConnectWise\Clients\Sales\Model\MemberReference
     */
    public function getAssignTo()
    {
        return $this->container['assign_to'];
    }

    /**
     * Sets assign_to
     * @param \Spinen\ConnectWise\Clients\Sales\Model\MemberReference $assign_to
     * @return $this
     */
    public function setAssignTo($assign_to)
    {
        $this->container['assign_to'] = $assign_to;

        return $this;
    }

    /**
     * Gets schedule_status
     * @return \Spinen\ConnectWise\Clients\Sales\Model\ScheduleStatusReference
     */
    public function getScheduleStatus()
    {
        return $this->container['schedule_status'];
    }

    /**
     * Sets schedule_status
     * @param \Spinen\ConnectWise\Clients\Sales\Model\ScheduleStatusReference $schedule_status
     * @return $this
     */
    public function setScheduleStatus($schedule_status)
    {
        $this->container['schedule_status'] = $schedule_status;

        return $this;
    }

    /**
     * Gets reminder
     * @return \Spinen\ConnectWise\Clients\Sales\Model\ReminderReference
     */
    public function getReminder()
    {
        return $this->container['reminder'];
    }

    /**
     * Sets reminder
     * @param \Spinen\ConnectWise\Clients\Sales\Model\ReminderReference $reminder
     * @return $this
     */
    public function setReminder($reminder)
    {
        $this->container['reminder'] = $reminder;

        return $this;
    }

    /**
     * Gets where
     * @return \Spinen\ConnectWise\Clients\Sales\Model\ServiceLocationReference
     */
    public function getWhere()
    {
        return $this->container['where'];
    }

    /**
     * Sets where
     * @param \Spinen\ConnectWise\Clients\Sales\Model\ServiceLocationReference $where
     * @return $this
     */
    public function setWhere($where)
    {
        $this->container['where'] = $where;

        return $this;
    }

    /**
     * Gets notify_flag
     * @return bool
     */
    public function getNotifyFlag()
    {
        return $this->container['notify_flag'];
    }

    /**
     * Sets notify_flag
     * @param bool $notify_flag
     * @return $this
     */
    public function setNotifyFlag($notify_flag)
    {
        $this->container['notify_flag'] = $notify_flag;

        return $this;
    }

    /**
     * Gets mobile_guid
     * @return \Spinen\ConnectWise\Clients\Sales\Model\Guid
     */
    public function getMobileGuid()
    {
        return $this->container['mobile_guid'];
    }

    /**
     * Sets mobile_guid
     * @param \Spinen\ConnectWise\Clients\Sales\Model\Guid $mobile_guid
     * @return $this
     */
    public function setMobileGuid($mobile_guid)
    {
        $this->container['mobile_guid'] = $mobile_guid;

        return $this;
    }

    /**
     * Gets _info
     * @return \Spinen\ConnectWise\Clients\Sales\Model\Metadata
     */
    public function getInfo()
    {
        return $this->container['_info'];
    }

    /**
     * Sets _info
     * @param \Spinen\ConnectWise\Clients\Sales\Model\Metadata $_info Metadata of the entity
     * @return $this
     */
    public function setInfo($_info)
    {
        $this->container['_info'] = $_info;

        return $this;
    }

    /**
     * Gets custom_fields
     * @return \Spinen\ConnectWise\Clients\Sales\Model\CustomFieldValue[]
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     * @param \Spinen\ConnectWise\Clients\Sales\Model\CustomFieldValue[] $custom_fields
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Spinen\ConnectWise\Clients\Sales\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Spinen\ConnectWise\Clients\Sales\ObjectSerializer::sanitizeForSerialization($this));
    }
}


