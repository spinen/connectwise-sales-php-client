<?php
/**
 * OpportunityToSalesOrderConversion
 *
 * PHP version 5
 *
 * @category Class
 * @package  Spinen\ConnectWise\Clients\Sales
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sales API
 *
 * ConnectWise Sales API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: platform@connectwise.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Clients\Sales\Model;

use \ArrayAccess;

/**
 * OpportunityToSalesOrderConversion Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Spinen\ConnectWise\Clients\Sales
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class OpportunityToSalesOrderConversion implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'OpportunityToSalesOrderConversion';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'sales_order_id' => 'int',
        'name' => 'string',
        'include_all_notes_flag' => 'bool',
        'include_all_documents_flag' => 'bool',
        'include_all_products_flag' => 'bool',
        'include_note_ids' => 'int[]',
        'include_document_ids' => 'int[]',
        'include_product_ids' => 'int[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'sales_order_id' => 'salesOrderId',
        'name' => 'name',
        'include_all_notes_flag' => 'includeAllNotesFlag',
        'include_all_documents_flag' => 'includeAllDocumentsFlag',
        'include_all_products_flag' => 'includeAllProductsFlag',
        'include_note_ids' => 'includeNoteIds',
        'include_document_ids' => 'includeDocumentIds',
        'include_product_ids' => 'includeProductIds'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'sales_order_id' => 'setSalesOrderId',
        'name' => 'setName',
        'include_all_notes_flag' => 'setIncludeAllNotesFlag',
        'include_all_documents_flag' => 'setIncludeAllDocumentsFlag',
        'include_all_products_flag' => 'setIncludeAllProductsFlag',
        'include_note_ids' => 'setIncludeNoteIds',
        'include_document_ids' => 'setIncludeDocumentIds',
        'include_product_ids' => 'setIncludeProductIds'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'sales_order_id' => 'getSalesOrderId',
        'name' => 'getName',
        'include_all_notes_flag' => 'getIncludeAllNotesFlag',
        'include_all_documents_flag' => 'getIncludeAllDocumentsFlag',
        'include_all_products_flag' => 'getIncludeAllProductsFlag',
        'include_note_ids' => 'getIncludeNoteIds',
        'include_document_ids' => 'getIncludeDocumentIds',
        'include_product_ids' => 'getIncludeProductIds'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sales_order_id'] = isset($data['sales_order_id']) ? $data['sales_order_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['include_all_notes_flag'] = isset($data['include_all_notes_flag']) ? $data['include_all_notes_flag'] : null;
        $this->container['include_all_documents_flag'] = isset($data['include_all_documents_flag']) ? $data['include_all_documents_flag'] : null;
        $this->container['include_all_products_flag'] = isset($data['include_all_products_flag']) ? $data['include_all_products_flag'] : null;
        $this->container['include_note_ids'] = isset($data['include_note_ids']) ? $data['include_note_ids'] : null;
        $this->container['include_document_ids'] = isset($data['include_document_ids']) ? $data['include_document_ids'] : null;
        $this->container['include_product_ids'] = isset($data['include_product_ids']) ? $data['include_product_ids'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets sales_order_id
     * @return int
     */
    public function getSalesOrderId()
    {
        return $this->container['sales_order_id'];
    }

    /**
     * Sets sales_order_id
     * @param int $sales_order_id
     * @return $this
     */
    public function setSalesOrderId($sales_order_id)
    {
        $this->container['sales_order_id'] = $sales_order_id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets include_all_notes_flag
     * @return bool
     */
    public function getIncludeAllNotesFlag()
    {
        return $this->container['include_all_notes_flag'];
    }

    /**
     * Sets include_all_notes_flag
     * @param bool $include_all_notes_flag
     * @return $this
     */
    public function setIncludeAllNotesFlag($include_all_notes_flag)
    {
        $this->container['include_all_notes_flag'] = $include_all_notes_flag;

        return $this;
    }

    /**
     * Gets include_all_documents_flag
     * @return bool
     */
    public function getIncludeAllDocumentsFlag()
    {
        return $this->container['include_all_documents_flag'];
    }

    /**
     * Sets include_all_documents_flag
     * @param bool $include_all_documents_flag
     * @return $this
     */
    public function setIncludeAllDocumentsFlag($include_all_documents_flag)
    {
        $this->container['include_all_documents_flag'] = $include_all_documents_flag;

        return $this;
    }

    /**
     * Gets include_all_products_flag
     * @return bool
     */
    public function getIncludeAllProductsFlag()
    {
        return $this->container['include_all_products_flag'];
    }

    /**
     * Sets include_all_products_flag
     * @param bool $include_all_products_flag
     * @return $this
     */
    public function setIncludeAllProductsFlag($include_all_products_flag)
    {
        $this->container['include_all_products_flag'] = $include_all_products_flag;

        return $this;
    }

    /**
     * Gets include_note_ids
     * @return int[]
     */
    public function getIncludeNoteIds()
    {
        return $this->container['include_note_ids'];
    }

    /**
     * Sets include_note_ids
     * @param int[] $include_note_ids
     * @return $this
     */
    public function setIncludeNoteIds($include_note_ids)
    {
        $this->container['include_note_ids'] = $include_note_ids;

        return $this;
    }

    /**
     * Gets include_document_ids
     * @return int[]
     */
    public function getIncludeDocumentIds()
    {
        return $this->container['include_document_ids'];
    }

    /**
     * Sets include_document_ids
     * @param int[] $include_document_ids
     * @return $this
     */
    public function setIncludeDocumentIds($include_document_ids)
    {
        $this->container['include_document_ids'] = $include_document_ids;

        return $this;
    }

    /**
     * Gets include_product_ids
     * @return int[]
     */
    public function getIncludeProductIds()
    {
        return $this->container['include_product_ids'];
    }

    /**
     * Sets include_product_ids
     * @param int[] $include_product_ids
     * @return $this
     */
    public function setIncludeProductIds($include_product_ids)
    {
        $this->container['include_product_ids'] = $include_product_ids;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Spinen\ConnectWise\Clients\Sales\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Spinen\ConnectWise\Clients\Sales\ObjectSerializer::sanitizeForSerialization($this));
    }
}


