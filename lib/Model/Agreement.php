<?php
/**
 * Agreement
 *
 * PHP version 5
 *
 * @category Class
 * @package  Spinen\ConnectWise\Clients\Sales
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sales API
 *
 * ConnectWise Sales API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: platform@connectwise.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Clients\Sales\Model;

use \ArrayAccess;

/**
 * Agreement Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Spinen\ConnectWise\Clients\Sales
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Agreement implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Agreement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'type' => '\Spinen\ConnectWise\Clients\Sales\Model\AgreementTypeReference',
        'company' => '\Spinen\ConnectWise\Clients\Sales\Model\CompanyReference',
        'contact' => '\Spinen\ConnectWise\Clients\Sales\Model\ContactReference',
        'sub_contract_company' => '\Spinen\ConnectWise\Clients\Sales\Model\CompanyReference',
        'sub_contract_contact' => '\Spinen\ConnectWise\Clients\Sales\Model\ContactReference',
        'parent_agreement_id' => 'int',
        'customer_po' => 'string',
        'location_id' => 'int',
        'business_unit_id' => 'int',
        'restrict_location_flag' => 'bool',
        'restrict_department_flag' => 'bool',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'no_ending_date_flag' => 'bool',
        'opportunity' => '\Spinen\ConnectWise\Clients\Sales\Model\OpportunityReference',
        'cancelled_flag' => 'bool',
        'date_cancelled' => '\DateTime',
        'reason_cancelled' => 'string',
        'sla_id' => 'int',
        'work_order' => 'string',
        'internal_notes' => 'string',
        'application_units' => 'string',
        'application_limit' => 'double',
        'application_cycle' => 'string',
        'application_unlimited_flag' => 'bool',
        'one_time_flag' => 'bool',
        'cover_agreement_time' => 'bool',
        'cover_agreement_product' => 'bool',
        'cover_agreement_expense' => 'bool',
        'cover_sales_tax' => 'bool',
        'carry_over_unused' => 'bool',
        'allow_overruns' => 'bool',
        'expired_days' => 'int',
        'limit' => 'int',
        'expire_when_zero' => 'bool',
        'charge_to_firm' => 'bool',
        'employee_comp_rate' => 'string',
        'employee_comp_not_exceed' => 'string',
        'comp_hourly_rate' => 'double',
        'comp_limit_amount' => 'double',
        'bill_cycle_id' => 'int',
        'bill_one_time_flag' => 'bool',
        'bill_terms_id' => 'int',
        'invoicing_cycle' => 'string',
        'bill_to_company' => '\Spinen\ConnectWise\Clients\Sales\Model\CompanyReference',
        'bill_to_site' => '\Spinen\ConnectWise\Clients\Sales\Model\SiteReference',
        'bill_amount' => 'double',
        'taxable' => 'bool',
        'prorate_first_bill' => 'double',
        'bill_start_date' => '\DateTime',
        'tax_code_id' => 'int',
        'restrict_down_payment' => 'bool',
        'invoice_description' => 'string',
        'top_comment' => 'bool',
        'bottom_comment' => 'bool',
        'work_role' => '\Spinen\ConnectWise\Clients\Sales\Model\WorkRoleReference',
        'work_type' => '\Spinen\ConnectWise\Clients\Sales\Model\WorkTypeReference',
        'project_type_id' => 'int',
        'invoice_template_setup_id' => 'int',
        'bill_time' => 'string',
        'bill_expenses' => 'string',
        'bill_products' => 'string',
        'billable_time_invoice' => 'bool',
        'billable_expense_invoice' => 'bool',
        'billable_product_invoice' => 'bool',
        '_info' => '\Spinen\ConnectWise\Clients\Sales\Model\Metadata',
        'period_type' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'type' => 'type',
        'company' => 'company',
        'contact' => 'contact',
        'sub_contract_company' => 'subContractCompany',
        'sub_contract_contact' => 'subContractContact',
        'parent_agreement_id' => 'parentAgreementId',
        'customer_po' => 'customerPO',
        'location_id' => 'locationId',
        'business_unit_id' => 'businessUnitId',
        'restrict_location_flag' => 'restrictLocationFlag',
        'restrict_department_flag' => 'restrictDepartmentFlag',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'no_ending_date_flag' => 'noEndingDateFlag',
        'opportunity' => 'opportunity',
        'cancelled_flag' => 'cancelledFlag',
        'date_cancelled' => 'dateCancelled',
        'reason_cancelled' => 'reasonCancelled',
        'sla_id' => 'slaId',
        'work_order' => 'workOrder',
        'internal_notes' => 'internalNotes',
        'application_units' => 'applicationUnits',
        'application_limit' => 'applicationLimit',
        'application_cycle' => 'applicationCycle',
        'application_unlimited_flag' => 'applicationUnlimitedFlag',
        'one_time_flag' => 'oneTimeFlag',
        'cover_agreement_time' => 'coverAgreementTime',
        'cover_agreement_product' => 'coverAgreementProduct',
        'cover_agreement_expense' => 'coverAgreementExpense',
        'cover_sales_tax' => 'coverSalesTax',
        'carry_over_unused' => 'carryOverUnused',
        'allow_overruns' => 'allowOverruns',
        'expired_days' => 'expiredDays',
        'limit' => 'limit',
        'expire_when_zero' => 'expireWhenZero',
        'charge_to_firm' => 'chargeToFirm',
        'employee_comp_rate' => 'employeeCompRate',
        'employee_comp_not_exceed' => 'employeeCompNotExceed',
        'comp_hourly_rate' => 'compHourlyRate',
        'comp_limit_amount' => 'compLimitAmount',
        'bill_cycle_id' => 'billCycleId',
        'bill_one_time_flag' => 'billOneTimeFlag',
        'bill_terms_id' => 'billTermsId',
        'invoicing_cycle' => 'invoicingCycle',
        'bill_to_company' => 'billToCompany',
        'bill_to_site' => 'billToSite',
        'bill_amount' => 'billAmount',
        'taxable' => 'taxable',
        'prorate_first_bill' => 'prorateFirstBill',
        'bill_start_date' => 'billStartDate',
        'tax_code_id' => 'taxCodeId',
        'restrict_down_payment' => 'restrictDownPayment',
        'invoice_description' => 'invoiceDescription',
        'top_comment' => 'topComment',
        'bottom_comment' => 'bottomComment',
        'work_role' => 'workRole',
        'work_type' => 'workType',
        'project_type_id' => 'projectTypeId',
        'invoice_template_setup_id' => 'invoiceTemplateSetupId',
        'bill_time' => 'billTime',
        'bill_expenses' => 'billExpenses',
        'bill_products' => 'billProducts',
        'billable_time_invoice' => 'billableTimeInvoice',
        'billable_expense_invoice' => 'billableExpenseInvoice',
        'billable_product_invoice' => 'billableProductInvoice',
        '_info' => '_info',
        'period_type' => 'periodType'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'type' => 'setType',
        'company' => 'setCompany',
        'contact' => 'setContact',
        'sub_contract_company' => 'setSubContractCompany',
        'sub_contract_contact' => 'setSubContractContact',
        'parent_agreement_id' => 'setParentAgreementId',
        'customer_po' => 'setCustomerPo',
        'location_id' => 'setLocationId',
        'business_unit_id' => 'setBusinessUnitId',
        'restrict_location_flag' => 'setRestrictLocationFlag',
        'restrict_department_flag' => 'setRestrictDepartmentFlag',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'no_ending_date_flag' => 'setNoEndingDateFlag',
        'opportunity' => 'setOpportunity',
        'cancelled_flag' => 'setCancelledFlag',
        'date_cancelled' => 'setDateCancelled',
        'reason_cancelled' => 'setReasonCancelled',
        'sla_id' => 'setSlaId',
        'work_order' => 'setWorkOrder',
        'internal_notes' => 'setInternalNotes',
        'application_units' => 'setApplicationUnits',
        'application_limit' => 'setApplicationLimit',
        'application_cycle' => 'setApplicationCycle',
        'application_unlimited_flag' => 'setApplicationUnlimitedFlag',
        'one_time_flag' => 'setOneTimeFlag',
        'cover_agreement_time' => 'setCoverAgreementTime',
        'cover_agreement_product' => 'setCoverAgreementProduct',
        'cover_agreement_expense' => 'setCoverAgreementExpense',
        'cover_sales_tax' => 'setCoverSalesTax',
        'carry_over_unused' => 'setCarryOverUnused',
        'allow_overruns' => 'setAllowOverruns',
        'expired_days' => 'setExpiredDays',
        'limit' => 'setLimit',
        'expire_when_zero' => 'setExpireWhenZero',
        'charge_to_firm' => 'setChargeToFirm',
        'employee_comp_rate' => 'setEmployeeCompRate',
        'employee_comp_not_exceed' => 'setEmployeeCompNotExceed',
        'comp_hourly_rate' => 'setCompHourlyRate',
        'comp_limit_amount' => 'setCompLimitAmount',
        'bill_cycle_id' => 'setBillCycleId',
        'bill_one_time_flag' => 'setBillOneTimeFlag',
        'bill_terms_id' => 'setBillTermsId',
        'invoicing_cycle' => 'setInvoicingCycle',
        'bill_to_company' => 'setBillToCompany',
        'bill_to_site' => 'setBillToSite',
        'bill_amount' => 'setBillAmount',
        'taxable' => 'setTaxable',
        'prorate_first_bill' => 'setProrateFirstBill',
        'bill_start_date' => 'setBillStartDate',
        'tax_code_id' => 'setTaxCodeId',
        'restrict_down_payment' => 'setRestrictDownPayment',
        'invoice_description' => 'setInvoiceDescription',
        'top_comment' => 'setTopComment',
        'bottom_comment' => 'setBottomComment',
        'work_role' => 'setWorkRole',
        'work_type' => 'setWorkType',
        'project_type_id' => 'setProjectTypeId',
        'invoice_template_setup_id' => 'setInvoiceTemplateSetupId',
        'bill_time' => 'setBillTime',
        'bill_expenses' => 'setBillExpenses',
        'bill_products' => 'setBillProducts',
        'billable_time_invoice' => 'setBillableTimeInvoice',
        'billable_expense_invoice' => 'setBillableExpenseInvoice',
        'billable_product_invoice' => 'setBillableProductInvoice',
        '_info' => 'setInfo',
        'period_type' => 'setPeriodType'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'type' => 'getType',
        'company' => 'getCompany',
        'contact' => 'getContact',
        'sub_contract_company' => 'getSubContractCompany',
        'sub_contract_contact' => 'getSubContractContact',
        'parent_agreement_id' => 'getParentAgreementId',
        'customer_po' => 'getCustomerPo',
        'location_id' => 'getLocationId',
        'business_unit_id' => 'getBusinessUnitId',
        'restrict_location_flag' => 'getRestrictLocationFlag',
        'restrict_department_flag' => 'getRestrictDepartmentFlag',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'no_ending_date_flag' => 'getNoEndingDateFlag',
        'opportunity' => 'getOpportunity',
        'cancelled_flag' => 'getCancelledFlag',
        'date_cancelled' => 'getDateCancelled',
        'reason_cancelled' => 'getReasonCancelled',
        'sla_id' => 'getSlaId',
        'work_order' => 'getWorkOrder',
        'internal_notes' => 'getInternalNotes',
        'application_units' => 'getApplicationUnits',
        'application_limit' => 'getApplicationLimit',
        'application_cycle' => 'getApplicationCycle',
        'application_unlimited_flag' => 'getApplicationUnlimitedFlag',
        'one_time_flag' => 'getOneTimeFlag',
        'cover_agreement_time' => 'getCoverAgreementTime',
        'cover_agreement_product' => 'getCoverAgreementProduct',
        'cover_agreement_expense' => 'getCoverAgreementExpense',
        'cover_sales_tax' => 'getCoverSalesTax',
        'carry_over_unused' => 'getCarryOverUnused',
        'allow_overruns' => 'getAllowOverruns',
        'expired_days' => 'getExpiredDays',
        'limit' => 'getLimit',
        'expire_when_zero' => 'getExpireWhenZero',
        'charge_to_firm' => 'getChargeToFirm',
        'employee_comp_rate' => 'getEmployeeCompRate',
        'employee_comp_not_exceed' => 'getEmployeeCompNotExceed',
        'comp_hourly_rate' => 'getCompHourlyRate',
        'comp_limit_amount' => 'getCompLimitAmount',
        'bill_cycle_id' => 'getBillCycleId',
        'bill_one_time_flag' => 'getBillOneTimeFlag',
        'bill_terms_id' => 'getBillTermsId',
        'invoicing_cycle' => 'getInvoicingCycle',
        'bill_to_company' => 'getBillToCompany',
        'bill_to_site' => 'getBillToSite',
        'bill_amount' => 'getBillAmount',
        'taxable' => 'getTaxable',
        'prorate_first_bill' => 'getProrateFirstBill',
        'bill_start_date' => 'getBillStartDate',
        'tax_code_id' => 'getTaxCodeId',
        'restrict_down_payment' => 'getRestrictDownPayment',
        'invoice_description' => 'getInvoiceDescription',
        'top_comment' => 'getTopComment',
        'bottom_comment' => 'getBottomComment',
        'work_role' => 'getWorkRole',
        'work_type' => 'getWorkType',
        'project_type_id' => 'getProjectTypeId',
        'invoice_template_setup_id' => 'getInvoiceTemplateSetupId',
        'bill_time' => 'getBillTime',
        'bill_expenses' => 'getBillExpenses',
        'bill_products' => 'getBillProducts',
        'billable_time_invoice' => 'getBillableTimeInvoice',
        'billable_expense_invoice' => 'getBillableExpenseInvoice',
        'billable_product_invoice' => 'getBillableProductInvoice',
        '_info' => 'getInfo',
        'period_type' => 'getPeriodType'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const APPLICATION_UNITS_AMOUNT = 'Amount';
    const APPLICATION_UNITS_HOURS = 'Hours';
    const APPLICATION_UNITS_INCIDENTS = 'Incidents';
    const APPLICATION_CYCLE_CONTRACT2_WEEKS = 'Contract2Weeks';
    const APPLICATION_CYCLE_CONTRACT4_WEEKS = 'Contract4Weeks';
    const APPLICATION_CYCLE_CONTRACT_YEAR = 'ContractYear';
    const APPLICATION_CYCLE_CALENDAR_MONTH = 'CalendarMonth';
    const APPLICATION_CYCLE_CALENDAR_QUARTER = 'CalendarQuarter';
    const APPLICATION_CYCLE_CALENDAR_WEEK = 'CalendarWeek';
    const APPLICATION_CYCLE_CONTRACT_QUARTER = 'ContractQuarter';
    const APPLICATION_CYCLE_CALENDAR_YEAR = 'CalendarYear';
    const EMPLOYEE_COMP_RATE_ACTUAL = 'Actual';
    const EMPLOYEE_COMP_RATE_HOURLY = 'Hourly';
    const EMPLOYEE_COMP_NOT_EXCEED_BILLING = 'Billing';
    const EMPLOYEE_COMP_NOT_EXCEED_PERCENT = 'Percent';
    const EMPLOYEE_COMP_NOT_EXCEED_AMOUNT = 'Amount';
    const INVOICING_CYCLE_CALENDAR_YEAR = 'CalendarYear';
    const INVOICING_CYCLE_CONTRACT_YEAR = 'ContractYear';
    const BILL_TIME_BILLABLE = 'Billable';
    const BILL_TIME_DO_NOT_BILL = 'DoNotBill';
    const BILL_TIME_NO_CHARGE = 'NoCharge';
    const BILL_TIME_NO_DEFAULT = 'NoDefault';
    const BILL_EXPENSES_BILLABLE = 'Billable';
    const BILL_EXPENSES_DO_NOT_BILL = 'DoNotBill';
    const BILL_EXPENSES_NO_CHARGE = 'NoCharge';
    const BILL_EXPENSES_NO_DEFAULT = 'NoDefault';
    const BILL_PRODUCTS_BILLABLE = 'Billable';
    const BILL_PRODUCTS_DO_NOT_BILL = 'DoNotBill';
    const BILL_PRODUCTS_NO_CHARGE = 'NoCharge';
    const BILL_PRODUCTS_NO_DEFAULT = 'NoDefault';
    const PERIOD_TYPE_CURRENT = 'Current';
    const PERIOD_TYPE_FUTURE = 'Future';
    const PERIOD_TYPE_BOTH = 'Both';
    const PERIOD_TYPE_UNDEFINED = 'Undefined';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getApplicationUnitsAllowableValues()
    {
        return [
            self::APPLICATION_UNITS_AMOUNT,
            self::APPLICATION_UNITS_HOURS,
            self::APPLICATION_UNITS_INCIDENTS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getApplicationCycleAllowableValues()
    {
        return [
            self::APPLICATION_CYCLE_CONTRACT2_WEEKS,
            self::APPLICATION_CYCLE_CONTRACT4_WEEKS,
            self::APPLICATION_CYCLE_CONTRACT_YEAR,
            self::APPLICATION_CYCLE_CALENDAR_MONTH,
            self::APPLICATION_CYCLE_CALENDAR_QUARTER,
            self::APPLICATION_CYCLE_CALENDAR_WEEK,
            self::APPLICATION_CYCLE_CONTRACT_QUARTER,
            self::APPLICATION_CYCLE_CALENDAR_YEAR,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getEmployeeCompRateAllowableValues()
    {
        return [
            self::EMPLOYEE_COMP_RATE_ACTUAL,
            self::EMPLOYEE_COMP_RATE_HOURLY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getEmployeeCompNotExceedAllowableValues()
    {
        return [
            self::EMPLOYEE_COMP_NOT_EXCEED_BILLING,
            self::EMPLOYEE_COMP_NOT_EXCEED_PERCENT,
            self::EMPLOYEE_COMP_NOT_EXCEED_AMOUNT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getInvoicingCycleAllowableValues()
    {
        return [
            self::INVOICING_CYCLE_CALENDAR_YEAR,
            self::INVOICING_CYCLE_CONTRACT_YEAR,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getBillTimeAllowableValues()
    {
        return [
            self::BILL_TIME_BILLABLE,
            self::BILL_TIME_DO_NOT_BILL,
            self::BILL_TIME_NO_CHARGE,
            self::BILL_TIME_NO_DEFAULT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getBillExpensesAllowableValues()
    {
        return [
            self::BILL_EXPENSES_BILLABLE,
            self::BILL_EXPENSES_DO_NOT_BILL,
            self::BILL_EXPENSES_NO_CHARGE,
            self::BILL_EXPENSES_NO_DEFAULT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getBillProductsAllowableValues()
    {
        return [
            self::BILL_PRODUCTS_BILLABLE,
            self::BILL_PRODUCTS_DO_NOT_BILL,
            self::BILL_PRODUCTS_NO_CHARGE,
            self::BILL_PRODUCTS_NO_DEFAULT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getPeriodTypeAllowableValues()
    {
        return [
            self::PERIOD_TYPE_CURRENT,
            self::PERIOD_TYPE_FUTURE,
            self::PERIOD_TYPE_BOTH,
            self::PERIOD_TYPE_UNDEFINED,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
        $this->container['contact'] = isset($data['contact']) ? $data['contact'] : null;
        $this->container['sub_contract_company'] = isset($data['sub_contract_company']) ? $data['sub_contract_company'] : null;
        $this->container['sub_contract_contact'] = isset($data['sub_contract_contact']) ? $data['sub_contract_contact'] : null;
        $this->container['parent_agreement_id'] = isset($data['parent_agreement_id']) ? $data['parent_agreement_id'] : null;
        $this->container['customer_po'] = isset($data['customer_po']) ? $data['customer_po'] : null;
        $this->container['location_id'] = isset($data['location_id']) ? $data['location_id'] : null;
        $this->container['business_unit_id'] = isset($data['business_unit_id']) ? $data['business_unit_id'] : null;
        $this->container['restrict_location_flag'] = isset($data['restrict_location_flag']) ? $data['restrict_location_flag'] : null;
        $this->container['restrict_department_flag'] = isset($data['restrict_department_flag']) ? $data['restrict_department_flag'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['no_ending_date_flag'] = isset($data['no_ending_date_flag']) ? $data['no_ending_date_flag'] : null;
        $this->container['opportunity'] = isset($data['opportunity']) ? $data['opportunity'] : null;
        $this->container['cancelled_flag'] = isset($data['cancelled_flag']) ? $data['cancelled_flag'] : null;
        $this->container['date_cancelled'] = isset($data['date_cancelled']) ? $data['date_cancelled'] : null;
        $this->container['reason_cancelled'] = isset($data['reason_cancelled']) ? $data['reason_cancelled'] : null;
        $this->container['sla_id'] = isset($data['sla_id']) ? $data['sla_id'] : null;
        $this->container['work_order'] = isset($data['work_order']) ? $data['work_order'] : null;
        $this->container['internal_notes'] = isset($data['internal_notes']) ? $data['internal_notes'] : null;
        $this->container['application_units'] = isset($data['application_units']) ? $data['application_units'] : null;
        $this->container['application_limit'] = isset($data['application_limit']) ? $data['application_limit'] : null;
        $this->container['application_cycle'] = isset($data['application_cycle']) ? $data['application_cycle'] : null;
        $this->container['application_unlimited_flag'] = isset($data['application_unlimited_flag']) ? $data['application_unlimited_flag'] : null;
        $this->container['one_time_flag'] = isset($data['one_time_flag']) ? $data['one_time_flag'] : null;
        $this->container['cover_agreement_time'] = isset($data['cover_agreement_time']) ? $data['cover_agreement_time'] : null;
        $this->container['cover_agreement_product'] = isset($data['cover_agreement_product']) ? $data['cover_agreement_product'] : null;
        $this->container['cover_agreement_expense'] = isset($data['cover_agreement_expense']) ? $data['cover_agreement_expense'] : null;
        $this->container['cover_sales_tax'] = isset($data['cover_sales_tax']) ? $data['cover_sales_tax'] : null;
        $this->container['carry_over_unused'] = isset($data['carry_over_unused']) ? $data['carry_over_unused'] : null;
        $this->container['allow_overruns'] = isset($data['allow_overruns']) ? $data['allow_overruns'] : null;
        $this->container['expired_days'] = isset($data['expired_days']) ? $data['expired_days'] : null;
        $this->container['limit'] = isset($data['limit']) ? $data['limit'] : null;
        $this->container['expire_when_zero'] = isset($data['expire_when_zero']) ? $data['expire_when_zero'] : null;
        $this->container['charge_to_firm'] = isset($data['charge_to_firm']) ? $data['charge_to_firm'] : null;
        $this->container['employee_comp_rate'] = isset($data['employee_comp_rate']) ? $data['employee_comp_rate'] : null;
        $this->container['employee_comp_not_exceed'] = isset($data['employee_comp_not_exceed']) ? $data['employee_comp_not_exceed'] : null;
        $this->container['comp_hourly_rate'] = isset($data['comp_hourly_rate']) ? $data['comp_hourly_rate'] : null;
        $this->container['comp_limit_amount'] = isset($data['comp_limit_amount']) ? $data['comp_limit_amount'] : null;
        $this->container['bill_cycle_id'] = isset($data['bill_cycle_id']) ? $data['bill_cycle_id'] : null;
        $this->container['bill_one_time_flag'] = isset($data['bill_one_time_flag']) ? $data['bill_one_time_flag'] : null;
        $this->container['bill_terms_id'] = isset($data['bill_terms_id']) ? $data['bill_terms_id'] : null;
        $this->container['invoicing_cycle'] = isset($data['invoicing_cycle']) ? $data['invoicing_cycle'] : null;
        $this->container['bill_to_company'] = isset($data['bill_to_company']) ? $data['bill_to_company'] : null;
        $this->container['bill_to_site'] = isset($data['bill_to_site']) ? $data['bill_to_site'] : null;
        $this->container['bill_amount'] = isset($data['bill_amount']) ? $data['bill_amount'] : null;
        $this->container['taxable'] = isset($data['taxable']) ? $data['taxable'] : null;
        $this->container['prorate_first_bill'] = isset($data['prorate_first_bill']) ? $data['prorate_first_bill'] : null;
        $this->container['bill_start_date'] = isset($data['bill_start_date']) ? $data['bill_start_date'] : null;
        $this->container['tax_code_id'] = isset($data['tax_code_id']) ? $data['tax_code_id'] : null;
        $this->container['restrict_down_payment'] = isset($data['restrict_down_payment']) ? $data['restrict_down_payment'] : null;
        $this->container['invoice_description'] = isset($data['invoice_description']) ? $data['invoice_description'] : null;
        $this->container['top_comment'] = isset($data['top_comment']) ? $data['top_comment'] : null;
        $this->container['bottom_comment'] = isset($data['bottom_comment']) ? $data['bottom_comment'] : null;
        $this->container['work_role'] = isset($data['work_role']) ? $data['work_role'] : null;
        $this->container['work_type'] = isset($data['work_type']) ? $data['work_type'] : null;
        $this->container['project_type_id'] = isset($data['project_type_id']) ? $data['project_type_id'] : null;
        $this->container['invoice_template_setup_id'] = isset($data['invoice_template_setup_id']) ? $data['invoice_template_setup_id'] : null;
        $this->container['bill_time'] = isset($data['bill_time']) ? $data['bill_time'] : null;
        $this->container['bill_expenses'] = isset($data['bill_expenses']) ? $data['bill_expenses'] : null;
        $this->container['bill_products'] = isset($data['bill_products']) ? $data['bill_products'] : null;
        $this->container['billable_time_invoice'] = isset($data['billable_time_invoice']) ? $data['billable_time_invoice'] : null;
        $this->container['billable_expense_invoice'] = isset($data['billable_expense_invoice']) ? $data['billable_expense_invoice'] : null;
        $this->container['billable_product_invoice'] = isset($data['billable_product_invoice']) ? $data['billable_product_invoice'] : null;
        $this->container['_info'] = isset($data['_info']) ? $data['_info'] : null;
        $this->container['period_type'] = isset($data['period_type']) ? $data['period_type'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ((strlen($this->container['name']) > 100)) {
            $invalid_properties[] = "invalid value for 'name', the character length must be smaller than or equal to 100.";
        }

        if ($this->container['type'] === null) {
            $invalid_properties[] = "'type' can't be null";
        }
        if ($this->container['company'] === null) {
            $invalid_properties[] = "'company' can't be null";
        }
        if ($this->container['contact'] === null) {
            $invalid_properties[] = "'contact' can't be null";
        }
        if (!is_null($this->container['customer_po']) && (strlen($this->container['customer_po']) > 50)) {
            $invalid_properties[] = "invalid value for 'customer_po', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['reason_cancelled']) && (strlen($this->container['reason_cancelled']) > 50)) {
            $invalid_properties[] = "invalid value for 'reason_cancelled', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['work_order']) && (strlen($this->container['work_order']) > 20)) {
            $invalid_properties[] = "invalid value for 'work_order', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['internal_notes']) && (strlen($this->container['internal_notes']) > 5000)) {
            $invalid_properties[] = "invalid value for 'internal_notes', the character length must be smaller than or equal to 5000.";
        }

        $allowed_values = ["Amount", "Hours", "Incidents"];
        if (!in_array($this->container['application_units'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'application_units', must be one of #{allowed_values}.";
        }

        $allowed_values = ["Contract2Weeks", "Contract4Weeks", "ContractYear", "CalendarMonth", "CalendarQuarter", "CalendarWeek", "ContractQuarter", "CalendarYear"];
        if (!in_array($this->container['application_cycle'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'application_cycle', must be one of #{allowed_values}.";
        }

        $allowed_values = ["Actual", "Hourly"];
        if (!in_array($this->container['employee_comp_rate'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'employee_comp_rate', must be one of #{allowed_values}.";
        }

        $allowed_values = ["Billing", "Percent", "Amount"];
        if (!in_array($this->container['employee_comp_not_exceed'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'employee_comp_not_exceed', must be one of #{allowed_values}.";
        }

        $allowed_values = ["CalendarYear", "ContractYear"];
        if (!in_array($this->container['invoicing_cycle'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'invoicing_cycle', must be one of #{allowed_values}.";
        }

        $allowed_values = ["Billable", "DoNotBill", "NoCharge", "NoDefault"];
        if (!in_array($this->container['bill_time'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'bill_time', must be one of #{allowed_values}.";
        }

        $allowed_values = ["Billable", "DoNotBill", "NoCharge", "NoDefault"];
        if (!in_array($this->container['bill_expenses'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'bill_expenses', must be one of #{allowed_values}.";
        }

        $allowed_values = ["Billable", "DoNotBill", "NoCharge", "NoDefault"];
        if (!in_array($this->container['bill_products'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'bill_products', must be one of #{allowed_values}.";
        }

        $allowed_values = ["Current", "Future", "Both", "Undefined"];
        if (!in_array($this->container['period_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'period_type', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['name'] === null) {
            return false;
        }
        if (strlen($this->container['name']) > 100) {
            return false;
        }
        if ($this->container['type'] === null) {
            return false;
        }
        if ($this->container['company'] === null) {
            return false;
        }
        if ($this->container['contact'] === null) {
            return false;
        }
        if (strlen($this->container['customer_po']) > 50) {
            return false;
        }
        if (strlen($this->container['reason_cancelled']) > 50) {
            return false;
        }
        if (strlen($this->container['work_order']) > 20) {
            return false;
        }
        if (strlen($this->container['internal_notes']) > 5000) {
            return false;
        }
        $allowed_values = ["Amount", "Hours", "Incidents"];
        if (!in_array($this->container['application_units'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["Contract2Weeks", "Contract4Weeks", "ContractYear", "CalendarMonth", "CalendarQuarter", "CalendarWeek", "ContractQuarter", "CalendarYear"];
        if (!in_array($this->container['application_cycle'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["Actual", "Hourly"];
        if (!in_array($this->container['employee_comp_rate'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["Billing", "Percent", "Amount"];
        if (!in_array($this->container['employee_comp_not_exceed'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["CalendarYear", "ContractYear"];
        if (!in_array($this->container['invoicing_cycle'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["Billable", "DoNotBill", "NoCharge", "NoDefault"];
        if (!in_array($this->container['bill_time'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["Billable", "DoNotBill", "NoCharge", "NoDefault"];
        if (!in_array($this->container['bill_expenses'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["Billable", "DoNotBill", "NoCharge", "NoDefault"];
        if (!in_array($this->container['bill_products'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["Current", "Future", "Both", "Undefined"];
        if (!in_array($this->container['period_type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        if ((strlen($name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Agreement., must be smaller than or equal to 100.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     * @return \Spinen\ConnectWise\Clients\Sales\Model\AgreementTypeReference
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param \Spinen\ConnectWise\Clients\Sales\Model\AgreementTypeReference $type
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets company
     * @return \Spinen\ConnectWise\Clients\Sales\Model\CompanyReference
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     * @param \Spinen\ConnectWise\Clients\Sales\Model\CompanyReference $company
     * @return $this
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets contact
     * @return \Spinen\ConnectWise\Clients\Sales\Model\ContactReference
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     * @param \Spinen\ConnectWise\Clients\Sales\Model\ContactReference $contact
     * @return $this
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets sub_contract_company
     * @return \Spinen\ConnectWise\Clients\Sales\Model\CompanyReference
     */
    public function getSubContractCompany()
    {
        return $this->container['sub_contract_company'];
    }

    /**
     * Sets sub_contract_company
     * @param \Spinen\ConnectWise\Clients\Sales\Model\CompanyReference $sub_contract_company
     * @return $this
     */
    public function setSubContractCompany($sub_contract_company)
    {
        $this->container['sub_contract_company'] = $sub_contract_company;

        return $this;
    }

    /**
     * Gets sub_contract_contact
     * @return \Spinen\ConnectWise\Clients\Sales\Model\ContactReference
     */
    public function getSubContractContact()
    {
        return $this->container['sub_contract_contact'];
    }

    /**
     * Sets sub_contract_contact
     * @param \Spinen\ConnectWise\Clients\Sales\Model\ContactReference $sub_contract_contact
     * @return $this
     */
    public function setSubContractContact($sub_contract_contact)
    {
        $this->container['sub_contract_contact'] = $sub_contract_contact;

        return $this;
    }

    /**
     * Gets parent_agreement_id
     * @return int
     */
    public function getParentAgreementId()
    {
        return $this->container['parent_agreement_id'];
    }

    /**
     * Sets parent_agreement_id
     * @param int $parent_agreement_id
     * @return $this
     */
    public function setParentAgreementId($parent_agreement_id)
    {
        $this->container['parent_agreement_id'] = $parent_agreement_id;

        return $this;
    }

    /**
     * Gets customer_po
     * @return string
     */
    public function getCustomerPo()
    {
        return $this->container['customer_po'];
    }

    /**
     * Sets customer_po
     * @param string $customer_po
     * @return $this
     */
    public function setCustomerPo($customer_po)
    {
        if (!is_null($customer_po) && (strlen($customer_po) > 50)) {
            throw new \InvalidArgumentException('invalid length for $customer_po when calling Agreement., must be smaller than or equal to 50.');
        }

        $this->container['customer_po'] = $customer_po;

        return $this;
    }

    /**
     * Gets location_id
     * @return int
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     * @param int $location_id
     * @return $this
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets business_unit_id
     * @return int
     */
    public function getBusinessUnitId()
    {
        return $this->container['business_unit_id'];
    }

    /**
     * Sets business_unit_id
     * @param int $business_unit_id
     * @return $this
     */
    public function setBusinessUnitId($business_unit_id)
    {
        $this->container['business_unit_id'] = $business_unit_id;

        return $this;
    }

    /**
     * Gets restrict_location_flag
     * @return bool
     */
    public function getRestrictLocationFlag()
    {
        return $this->container['restrict_location_flag'];
    }

    /**
     * Sets restrict_location_flag
     * @param bool $restrict_location_flag
     * @return $this
     */
    public function setRestrictLocationFlag($restrict_location_flag)
    {
        $this->container['restrict_location_flag'] = $restrict_location_flag;

        return $this;
    }

    /**
     * Gets restrict_department_flag
     * @return bool
     */
    public function getRestrictDepartmentFlag()
    {
        return $this->container['restrict_department_flag'];
    }

    /**
     * Sets restrict_department_flag
     * @param bool $restrict_department_flag
     * @return $this
     */
    public function setRestrictDepartmentFlag($restrict_department_flag)
    {
        $this->container['restrict_department_flag'] = $restrict_department_flag;

        return $this;
    }

    /**
     * Gets start_date
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     * @param \DateTime $start_date
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     * @param \DateTime $end_date
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets no_ending_date_flag
     * @return bool
     */
    public function getNoEndingDateFlag()
    {
        return $this->container['no_ending_date_flag'];
    }

    /**
     * Sets no_ending_date_flag
     * @param bool $no_ending_date_flag
     * @return $this
     */
    public function setNoEndingDateFlag($no_ending_date_flag)
    {
        $this->container['no_ending_date_flag'] = $no_ending_date_flag;

        return $this;
    }

    /**
     * Gets opportunity
     * @return \Spinen\ConnectWise\Clients\Sales\Model\OpportunityReference
     */
    public function getOpportunity()
    {
        return $this->container['opportunity'];
    }

    /**
     * Sets opportunity
     * @param \Spinen\ConnectWise\Clients\Sales\Model\OpportunityReference $opportunity
     * @return $this
     */
    public function setOpportunity($opportunity)
    {
        $this->container['opportunity'] = $opportunity;

        return $this;
    }

    /**
     * Gets cancelled_flag
     * @return bool
     */
    public function getCancelledFlag()
    {
        return $this->container['cancelled_flag'];
    }

    /**
     * Sets cancelled_flag
     * @param bool $cancelled_flag
     * @return $this
     */
    public function setCancelledFlag($cancelled_flag)
    {
        $this->container['cancelled_flag'] = $cancelled_flag;

        return $this;
    }

    /**
     * Gets date_cancelled
     * @return \DateTime
     */
    public function getDateCancelled()
    {
        return $this->container['date_cancelled'];
    }

    /**
     * Sets date_cancelled
     * @param \DateTime $date_cancelled
     * @return $this
     */
    public function setDateCancelled($date_cancelled)
    {
        $this->container['date_cancelled'] = $date_cancelled;

        return $this;
    }

    /**
     * Gets reason_cancelled
     * @return string
     */
    public function getReasonCancelled()
    {
        return $this->container['reason_cancelled'];
    }

    /**
     * Sets reason_cancelled
     * @param string $reason_cancelled
     * @return $this
     */
    public function setReasonCancelled($reason_cancelled)
    {
        if (!is_null($reason_cancelled) && (strlen($reason_cancelled) > 50)) {
            throw new \InvalidArgumentException('invalid length for $reason_cancelled when calling Agreement., must be smaller than or equal to 50.');
        }

        $this->container['reason_cancelled'] = $reason_cancelled;

        return $this;
    }

    /**
     * Gets sla_id
     * @return int
     */
    public function getSlaId()
    {
        return $this->container['sla_id'];
    }

    /**
     * Sets sla_id
     * @param int $sla_id
     * @return $this
     */
    public function setSlaId($sla_id)
    {
        $this->container['sla_id'] = $sla_id;

        return $this;
    }

    /**
     * Gets work_order
     * @return string
     */
    public function getWorkOrder()
    {
        return $this->container['work_order'];
    }

    /**
     * Sets work_order
     * @param string $work_order
     * @return $this
     */
    public function setWorkOrder($work_order)
    {
        if (!is_null($work_order) && (strlen($work_order) > 20)) {
            throw new \InvalidArgumentException('invalid length for $work_order when calling Agreement., must be smaller than or equal to 20.');
        }

        $this->container['work_order'] = $work_order;

        return $this;
    }

    /**
     * Gets internal_notes
     * @return string
     */
    public function getInternalNotes()
    {
        return $this->container['internal_notes'];
    }

    /**
     * Sets internal_notes
     * @param string $internal_notes
     * @return $this
     */
    public function setInternalNotes($internal_notes)
    {
        if (!is_null($internal_notes) && (strlen($internal_notes) > 5000)) {
            throw new \InvalidArgumentException('invalid length for $internal_notes when calling Agreement., must be smaller than or equal to 5000.');
        }

        $this->container['internal_notes'] = $internal_notes;

        return $this;
    }

    /**
     * Gets application_units
     * @return string
     */
    public function getApplicationUnits()
    {
        return $this->container['application_units'];
    }

    /**
     * Sets application_units
     * @param string $application_units
     * @return $this
     */
    public function setApplicationUnits($application_units)
    {
        $allowed_values = array('Amount', 'Hours', 'Incidents');
        if (!is_null($application_units) && (!in_array($application_units, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'application_units', must be one of 'Amount', 'Hours', 'Incidents'");
        }
        $this->container['application_units'] = $application_units;

        return $this;
    }

    /**
     * Gets application_limit
     * @return double
     */
    public function getApplicationLimit()
    {
        return $this->container['application_limit'];
    }

    /**
     * Sets application_limit
     * @param double $application_limit
     * @return $this
     */
    public function setApplicationLimit($application_limit)
    {
        $this->container['application_limit'] = $application_limit;

        return $this;
    }

    /**
     * Gets application_cycle
     * @return string
     */
    public function getApplicationCycle()
    {
        return $this->container['application_cycle'];
    }

    /**
     * Sets application_cycle
     * @param string $application_cycle
     * @return $this
     */
    public function setApplicationCycle($application_cycle)
    {
        $allowed_values = array('Contract2Weeks', 'Contract4Weeks', 'ContractYear', 'CalendarMonth', 'CalendarQuarter', 'CalendarWeek', 'ContractQuarter', 'CalendarYear');
        if (!is_null($application_cycle) && (!in_array($application_cycle, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'application_cycle', must be one of 'Contract2Weeks', 'Contract4Weeks', 'ContractYear', 'CalendarMonth', 'CalendarQuarter', 'CalendarWeek', 'ContractQuarter', 'CalendarYear'");
        }
        $this->container['application_cycle'] = $application_cycle;

        return $this;
    }

    /**
     * Gets application_unlimited_flag
     * @return bool
     */
    public function getApplicationUnlimitedFlag()
    {
        return $this->container['application_unlimited_flag'];
    }

    /**
     * Sets application_unlimited_flag
     * @param bool $application_unlimited_flag
     * @return $this
     */
    public function setApplicationUnlimitedFlag($application_unlimited_flag)
    {
        $this->container['application_unlimited_flag'] = $application_unlimited_flag;

        return $this;
    }

    /**
     * Gets one_time_flag
     * @return bool
     */
    public function getOneTimeFlag()
    {
        return $this->container['one_time_flag'];
    }

    /**
     * Sets one_time_flag
     * @param bool $one_time_flag
     * @return $this
     */
    public function setOneTimeFlag($one_time_flag)
    {
        $this->container['one_time_flag'] = $one_time_flag;

        return $this;
    }

    /**
     * Gets cover_agreement_time
     * @return bool
     */
    public function getCoverAgreementTime()
    {
        return $this->container['cover_agreement_time'];
    }

    /**
     * Sets cover_agreement_time
     * @param bool $cover_agreement_time
     * @return $this
     */
    public function setCoverAgreementTime($cover_agreement_time)
    {
        $this->container['cover_agreement_time'] = $cover_agreement_time;

        return $this;
    }

    /**
     * Gets cover_agreement_product
     * @return bool
     */
    public function getCoverAgreementProduct()
    {
        return $this->container['cover_agreement_product'];
    }

    /**
     * Sets cover_agreement_product
     * @param bool $cover_agreement_product
     * @return $this
     */
    public function setCoverAgreementProduct($cover_agreement_product)
    {
        $this->container['cover_agreement_product'] = $cover_agreement_product;

        return $this;
    }

    /**
     * Gets cover_agreement_expense
     * @return bool
     */
    public function getCoverAgreementExpense()
    {
        return $this->container['cover_agreement_expense'];
    }

    /**
     * Sets cover_agreement_expense
     * @param bool $cover_agreement_expense
     * @return $this
     */
    public function setCoverAgreementExpense($cover_agreement_expense)
    {
        $this->container['cover_agreement_expense'] = $cover_agreement_expense;

        return $this;
    }

    /**
     * Gets cover_sales_tax
     * @return bool
     */
    public function getCoverSalesTax()
    {
        return $this->container['cover_sales_tax'];
    }

    /**
     * Sets cover_sales_tax
     * @param bool $cover_sales_tax
     * @return $this
     */
    public function setCoverSalesTax($cover_sales_tax)
    {
        $this->container['cover_sales_tax'] = $cover_sales_tax;

        return $this;
    }

    /**
     * Gets carry_over_unused
     * @return bool
     */
    public function getCarryOverUnused()
    {
        return $this->container['carry_over_unused'];
    }

    /**
     * Sets carry_over_unused
     * @param bool $carry_over_unused
     * @return $this
     */
    public function setCarryOverUnused($carry_over_unused)
    {
        $this->container['carry_over_unused'] = $carry_over_unused;

        return $this;
    }

    /**
     * Gets allow_overruns
     * @return bool
     */
    public function getAllowOverruns()
    {
        return $this->container['allow_overruns'];
    }

    /**
     * Sets allow_overruns
     * @param bool $allow_overruns
     * @return $this
     */
    public function setAllowOverruns($allow_overruns)
    {
        $this->container['allow_overruns'] = $allow_overruns;

        return $this;
    }

    /**
     * Gets expired_days
     * @return int
     */
    public function getExpiredDays()
    {
        return $this->container['expired_days'];
    }

    /**
     * Sets expired_days
     * @param int $expired_days
     * @return $this
     */
    public function setExpiredDays($expired_days)
    {
        $this->container['expired_days'] = $expired_days;

        return $this;
    }

    /**
     * Gets limit
     * @return int
     */
    public function getLimit()
    {
        return $this->container['limit'];
    }

    /**
     * Sets limit
     * @param int $limit
     * @return $this
     */
    public function setLimit($limit)
    {
        $this->container['limit'] = $limit;

        return $this;
    }

    /**
     * Gets expire_when_zero
     * @return bool
     */
    public function getExpireWhenZero()
    {
        return $this->container['expire_when_zero'];
    }

    /**
     * Sets expire_when_zero
     * @param bool $expire_when_zero
     * @return $this
     */
    public function setExpireWhenZero($expire_when_zero)
    {
        $this->container['expire_when_zero'] = $expire_when_zero;

        return $this;
    }

    /**
     * Gets charge_to_firm
     * @return bool
     */
    public function getChargeToFirm()
    {
        return $this->container['charge_to_firm'];
    }

    /**
     * Sets charge_to_firm
     * @param bool $charge_to_firm
     * @return $this
     */
    public function setChargeToFirm($charge_to_firm)
    {
        $this->container['charge_to_firm'] = $charge_to_firm;

        return $this;
    }

    /**
     * Gets employee_comp_rate
     * @return string
     */
    public function getEmployeeCompRate()
    {
        return $this->container['employee_comp_rate'];
    }

    /**
     * Sets employee_comp_rate
     * @param string $employee_comp_rate
     * @return $this
     */
    public function setEmployeeCompRate($employee_comp_rate)
    {
        $allowed_values = array('Actual', 'Hourly');
        if (!is_null($employee_comp_rate) && (!in_array($employee_comp_rate, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'employee_comp_rate', must be one of 'Actual', 'Hourly'");
        }
        $this->container['employee_comp_rate'] = $employee_comp_rate;

        return $this;
    }

    /**
     * Gets employee_comp_not_exceed
     * @return string
     */
    public function getEmployeeCompNotExceed()
    {
        return $this->container['employee_comp_not_exceed'];
    }

    /**
     * Sets employee_comp_not_exceed
     * @param string $employee_comp_not_exceed
     * @return $this
     */
    public function setEmployeeCompNotExceed($employee_comp_not_exceed)
    {
        $allowed_values = array('Billing', 'Percent', 'Amount');
        if (!is_null($employee_comp_not_exceed) && (!in_array($employee_comp_not_exceed, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'employee_comp_not_exceed', must be one of 'Billing', 'Percent', 'Amount'");
        }
        $this->container['employee_comp_not_exceed'] = $employee_comp_not_exceed;

        return $this;
    }

    /**
     * Gets comp_hourly_rate
     * @return double
     */
    public function getCompHourlyRate()
    {
        return $this->container['comp_hourly_rate'];
    }

    /**
     * Sets comp_hourly_rate
     * @param double $comp_hourly_rate
     * @return $this
     */
    public function setCompHourlyRate($comp_hourly_rate)
    {
        $this->container['comp_hourly_rate'] = $comp_hourly_rate;

        return $this;
    }

    /**
     * Gets comp_limit_amount
     * @return double
     */
    public function getCompLimitAmount()
    {
        return $this->container['comp_limit_amount'];
    }

    /**
     * Sets comp_limit_amount
     * @param double $comp_limit_amount
     * @return $this
     */
    public function setCompLimitAmount($comp_limit_amount)
    {
        $this->container['comp_limit_amount'] = $comp_limit_amount;

        return $this;
    }

    /**
     * Gets bill_cycle_id
     * @return int
     */
    public function getBillCycleId()
    {
        return $this->container['bill_cycle_id'];
    }

    /**
     * Sets bill_cycle_id
     * @param int $bill_cycle_id
     * @return $this
     */
    public function setBillCycleId($bill_cycle_id)
    {
        $this->container['bill_cycle_id'] = $bill_cycle_id;

        return $this;
    }

    /**
     * Gets bill_one_time_flag
     * @return bool
     */
    public function getBillOneTimeFlag()
    {
        return $this->container['bill_one_time_flag'];
    }

    /**
     * Sets bill_one_time_flag
     * @param bool $bill_one_time_flag
     * @return $this
     */
    public function setBillOneTimeFlag($bill_one_time_flag)
    {
        $this->container['bill_one_time_flag'] = $bill_one_time_flag;

        return $this;
    }

    /**
     * Gets bill_terms_id
     * @return int
     */
    public function getBillTermsId()
    {
        return $this->container['bill_terms_id'];
    }

    /**
     * Sets bill_terms_id
     * @param int $bill_terms_id
     * @return $this
     */
    public function setBillTermsId($bill_terms_id)
    {
        $this->container['bill_terms_id'] = $bill_terms_id;

        return $this;
    }

    /**
     * Gets invoicing_cycle
     * @return string
     */
    public function getInvoicingCycle()
    {
        return $this->container['invoicing_cycle'];
    }

    /**
     * Sets invoicing_cycle
     * @param string $invoicing_cycle
     * @return $this
     */
    public function setInvoicingCycle($invoicing_cycle)
    {
        $allowed_values = array('CalendarYear', 'ContractYear');
        if (!is_null($invoicing_cycle) && (!in_array($invoicing_cycle, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'invoicing_cycle', must be one of 'CalendarYear', 'ContractYear'");
        }
        $this->container['invoicing_cycle'] = $invoicing_cycle;

        return $this;
    }

    /**
     * Gets bill_to_company
     * @return \Spinen\ConnectWise\Clients\Sales\Model\CompanyReference
     */
    public function getBillToCompany()
    {
        return $this->container['bill_to_company'];
    }

    /**
     * Sets bill_to_company
     * @param \Spinen\ConnectWise\Clients\Sales\Model\CompanyReference $bill_to_company
     * @return $this
     */
    public function setBillToCompany($bill_to_company)
    {
        $this->container['bill_to_company'] = $bill_to_company;

        return $this;
    }

    /**
     * Gets bill_to_site
     * @return \Spinen\ConnectWise\Clients\Sales\Model\SiteReference
     */
    public function getBillToSite()
    {
        return $this->container['bill_to_site'];
    }

    /**
     * Sets bill_to_site
     * @param \Spinen\ConnectWise\Clients\Sales\Model\SiteReference $bill_to_site
     * @return $this
     */
    public function setBillToSite($bill_to_site)
    {
        $this->container['bill_to_site'] = $bill_to_site;

        return $this;
    }

    /**
     * Gets bill_amount
     * @return double
     */
    public function getBillAmount()
    {
        return $this->container['bill_amount'];
    }

    /**
     * Sets bill_amount
     * @param double $bill_amount
     * @return $this
     */
    public function setBillAmount($bill_amount)
    {
        $this->container['bill_amount'] = $bill_amount;

        return $this;
    }

    /**
     * Gets taxable
     * @return bool
     */
    public function getTaxable()
    {
        return $this->container['taxable'];
    }

    /**
     * Sets taxable
     * @param bool $taxable
     * @return $this
     */
    public function setTaxable($taxable)
    {
        $this->container['taxable'] = $taxable;

        return $this;
    }

    /**
     * Gets prorate_first_bill
     * @return double
     */
    public function getProrateFirstBill()
    {
        return $this->container['prorate_first_bill'];
    }

    /**
     * Sets prorate_first_bill
     * @param double $prorate_first_bill
     * @return $this
     */
    public function setProrateFirstBill($prorate_first_bill)
    {
        $this->container['prorate_first_bill'] = $prorate_first_bill;

        return $this;
    }

    /**
     * Gets bill_start_date
     * @return \DateTime
     */
    public function getBillStartDate()
    {
        return $this->container['bill_start_date'];
    }

    /**
     * Sets bill_start_date
     * @param \DateTime $bill_start_date
     * @return $this
     */
    public function setBillStartDate($bill_start_date)
    {
        $this->container['bill_start_date'] = $bill_start_date;

        return $this;
    }

    /**
     * Gets tax_code_id
     * @return int
     */
    public function getTaxCodeId()
    {
        return $this->container['tax_code_id'];
    }

    /**
     * Sets tax_code_id
     * @param int $tax_code_id
     * @return $this
     */
    public function setTaxCodeId($tax_code_id)
    {
        $this->container['tax_code_id'] = $tax_code_id;

        return $this;
    }

    /**
     * Gets restrict_down_payment
     * @return bool
     */
    public function getRestrictDownPayment()
    {
        return $this->container['restrict_down_payment'];
    }

    /**
     * Sets restrict_down_payment
     * @param bool $restrict_down_payment
     * @return $this
     */
    public function setRestrictDownPayment($restrict_down_payment)
    {
        $this->container['restrict_down_payment'] = $restrict_down_payment;

        return $this;
    }

    /**
     * Gets invoice_description
     * @return string
     */
    public function getInvoiceDescription()
    {
        return $this->container['invoice_description'];
    }

    /**
     * Sets invoice_description
     * @param string $invoice_description
     * @return $this
     */
    public function setInvoiceDescription($invoice_description)
    {
        $this->container['invoice_description'] = $invoice_description;

        return $this;
    }

    /**
     * Gets top_comment
     * @return bool
     */
    public function getTopComment()
    {
        return $this->container['top_comment'];
    }

    /**
     * Sets top_comment
     * @param bool $top_comment
     * @return $this
     */
    public function setTopComment($top_comment)
    {
        $this->container['top_comment'] = $top_comment;

        return $this;
    }

    /**
     * Gets bottom_comment
     * @return bool
     */
    public function getBottomComment()
    {
        return $this->container['bottom_comment'];
    }

    /**
     * Sets bottom_comment
     * @param bool $bottom_comment
     * @return $this
     */
    public function setBottomComment($bottom_comment)
    {
        $this->container['bottom_comment'] = $bottom_comment;

        return $this;
    }

    /**
     * Gets work_role
     * @return \Spinen\ConnectWise\Clients\Sales\Model\WorkRoleReference
     */
    public function getWorkRole()
    {
        return $this->container['work_role'];
    }

    /**
     * Sets work_role
     * @param \Spinen\ConnectWise\Clients\Sales\Model\WorkRoleReference $work_role
     * @return $this
     */
    public function setWorkRole($work_role)
    {
        $this->container['work_role'] = $work_role;

        return $this;
    }

    /**
     * Gets work_type
     * @return \Spinen\ConnectWise\Clients\Sales\Model\WorkTypeReference
     */
    public function getWorkType()
    {
        return $this->container['work_type'];
    }

    /**
     * Sets work_type
     * @param \Spinen\ConnectWise\Clients\Sales\Model\WorkTypeReference $work_type
     * @return $this
     */
    public function setWorkType($work_type)
    {
        $this->container['work_type'] = $work_type;

        return $this;
    }

    /**
     * Gets project_type_id
     * @return int
     */
    public function getProjectTypeId()
    {
        return $this->container['project_type_id'];
    }

    /**
     * Sets project_type_id
     * @param int $project_type_id
     * @return $this
     */
    public function setProjectTypeId($project_type_id)
    {
        $this->container['project_type_id'] = $project_type_id;

        return $this;
    }

    /**
     * Gets invoice_template_setup_id
     * @return int
     */
    public function getInvoiceTemplateSetupId()
    {
        return $this->container['invoice_template_setup_id'];
    }

    /**
     * Sets invoice_template_setup_id
     * @param int $invoice_template_setup_id
     * @return $this
     */
    public function setInvoiceTemplateSetupId($invoice_template_setup_id)
    {
        $this->container['invoice_template_setup_id'] = $invoice_template_setup_id;

        return $this;
    }

    /**
     * Gets bill_time
     * @return string
     */
    public function getBillTime()
    {
        return $this->container['bill_time'];
    }

    /**
     * Sets bill_time
     * @param string $bill_time
     * @return $this
     */
    public function setBillTime($bill_time)
    {
        $allowed_values = array('Billable', 'DoNotBill', 'NoCharge', 'NoDefault');
        if (!is_null($bill_time) && (!in_array($bill_time, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'bill_time', must be one of 'Billable', 'DoNotBill', 'NoCharge', 'NoDefault'");
        }
        $this->container['bill_time'] = $bill_time;

        return $this;
    }

    /**
     * Gets bill_expenses
     * @return string
     */
    public function getBillExpenses()
    {
        return $this->container['bill_expenses'];
    }

    /**
     * Sets bill_expenses
     * @param string $bill_expenses
     * @return $this
     */
    public function setBillExpenses($bill_expenses)
    {
        $allowed_values = array('Billable', 'DoNotBill', 'NoCharge', 'NoDefault');
        if (!is_null($bill_expenses) && (!in_array($bill_expenses, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'bill_expenses', must be one of 'Billable', 'DoNotBill', 'NoCharge', 'NoDefault'");
        }
        $this->container['bill_expenses'] = $bill_expenses;

        return $this;
    }

    /**
     * Gets bill_products
     * @return string
     */
    public function getBillProducts()
    {
        return $this->container['bill_products'];
    }

    /**
     * Sets bill_products
     * @param string $bill_products
     * @return $this
     */
    public function setBillProducts($bill_products)
    {
        $allowed_values = array('Billable', 'DoNotBill', 'NoCharge', 'NoDefault');
        if (!is_null($bill_products) && (!in_array($bill_products, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'bill_products', must be one of 'Billable', 'DoNotBill', 'NoCharge', 'NoDefault'");
        }
        $this->container['bill_products'] = $bill_products;

        return $this;
    }

    /**
     * Gets billable_time_invoice
     * @return bool
     */
    public function getBillableTimeInvoice()
    {
        return $this->container['billable_time_invoice'];
    }

    /**
     * Sets billable_time_invoice
     * @param bool $billable_time_invoice
     * @return $this
     */
    public function setBillableTimeInvoice($billable_time_invoice)
    {
        $this->container['billable_time_invoice'] = $billable_time_invoice;

        return $this;
    }

    /**
     * Gets billable_expense_invoice
     * @return bool
     */
    public function getBillableExpenseInvoice()
    {
        return $this->container['billable_expense_invoice'];
    }

    /**
     * Sets billable_expense_invoice
     * @param bool $billable_expense_invoice
     * @return $this
     */
    public function setBillableExpenseInvoice($billable_expense_invoice)
    {
        $this->container['billable_expense_invoice'] = $billable_expense_invoice;

        return $this;
    }

    /**
     * Gets billable_product_invoice
     * @return bool
     */
    public function getBillableProductInvoice()
    {
        return $this->container['billable_product_invoice'];
    }

    /**
     * Sets billable_product_invoice
     * @param bool $billable_product_invoice
     * @return $this
     */
    public function setBillableProductInvoice($billable_product_invoice)
    {
        $this->container['billable_product_invoice'] = $billable_product_invoice;

        return $this;
    }

    /**
     * Gets _info
     * @return \Spinen\ConnectWise\Clients\Sales\Model\Metadata
     */
    public function getInfo()
    {
        return $this->container['_info'];
    }

    /**
     * Sets _info
     * @param \Spinen\ConnectWise\Clients\Sales\Model\Metadata $_info Metadata of the entity
     * @return $this
     */
    public function setInfo($_info)
    {
        $this->container['_info'] = $_info;

        return $this;
    }

    /**
     * Gets period_type
     * @return string
     */
    public function getPeriodType()
    {
        return $this->container['period_type'];
    }

    /**
     * Sets period_type
     * @param string $period_type
     * @return $this
     */
    public function setPeriodType($period_type)
    {
        $allowed_values = array('Current', 'Future', 'Both', 'Undefined');
        if (!is_null($period_type) && (!in_array($period_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'period_type', must be one of 'Current', 'Future', 'Both', 'Undefined'");
        }
        $this->container['period_type'] = $period_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Spinen\ConnectWise\Clients\Sales\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Spinen\ConnectWise\Clients\Sales\ObjectSerializer::sanitizeForSerialization($this));
    }
}


